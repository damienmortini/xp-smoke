{"version":3,"file":"index.js","sources":["../node_modules/dlib/util/Signal.js","../node_modules/dlib/util/Ticker.js","../node_modules/dlmn/util/TickerElement.js","../node_modules/gl-matrix/esm/common.js","../node_modules/gl-matrix/esm/mat4.js","../node_modules/dlib/math/Matrix4.js","../node_modules/dlib/3d/Camera.js","../node_modules/dlib/3d/mesh/BoxMesh.js","../node_modules/dlib/gl/GLBuffer.js","../node_modules/dlib/gl/GLVertexAttribute.js","../node_modules/dlib/gl/GLMesh.js","../node_modules/gl-matrix/esm/vec2.js","../node_modules/dlib/math/Vector2.js","../node_modules/gl-matrix/esm/vec3.js","../node_modules/dlib/math/Vector3.js","../node_modules/gl-matrix/esm/vec4.js","../node_modules/dlib/math/Vector4.js","../node_modules/gl-matrix/esm/mat3.js","../node_modules/dlib/math/Matrix3.js","../node_modules/dlib/3d/Shader.js","../node_modules/dlib/gl/GLTexture.js","../node_modules/dlib/gl/GLProgram.js","../node_modules/dlib/gl/GLVertexArray.js","../node_modules/dlib/gl/GLObject.js","../node_modules/dlib/shader/CameraShader.js","../node_modules/dlib/shader/RayShader.js","../node_modules/dlib/shader/SDFShader.js","../node_modules/dlib/gl/objects/GLRayMarchingObject.js","../node_modules/dlib/input/Pointer.js","../node_modules/gl-matrix/esm/quat.js","../node_modules/dlib/math/Quaternion.js","../node_modules/dlib/3d/controllers/TrackballController.js","../src/main/View.js","../src/main/index.js"],"sourcesContent":["export default class Signal extends Set {\r\n  constructor() {\r\n    super();\r\n\r\n    this._onceCallbacksMap = new Map();\r\n  }\r\n\r\n  add(value, { once = false } = {}) {\r\n    if (once) {\r\n      const onceCallbackWrapper = (...args) => {\r\n        value(...args);\r\n        this.delete(value);\r\n      };\r\n      this._onceCallbacksMap.set(value, onceCallbackWrapper);\r\n      return super.add(onceCallbackWrapper);\r\n    } else {\r\n      return super.add(value);\r\n    }\r\n  }\r\n\r\n  delete(value) {\r\n    this._onceCallbacksMap.delete(value);\r\n    return super.delete(this._onceCallbacksMap.get(value) || value);\r\n  }\r\n\r\n  dispatch(value) {\r\n    for (const callback of this) {\r\n      callback(value);\r\n    }\r\n  }\r\n}\r\n","import Signal from \"./Signal.js\";\r\n\r\nconst DELTA_TIME_BASE = 1 / 60;\r\n\r\nclass Ticker extends Signal {\r\n  constructor() {\r\n    super();\r\n\r\n    this._updateBinded = this._update.bind(this);\r\n\r\n    this.time = window.performance.now() * .001;\r\n    this.reset();\r\n\r\n    document.addEventListener(\"visibilitychange\", () => {\r\n      this.reset();\r\n    });\r\n\r\n    this._update();\r\n  }\r\n\r\n  reset() {\r\n    this._previousTime = window.performance.now() * .001;\r\n    this.deltaTime = DELTA_TIME_BASE;\r\n    this.smoothDeltatime = this.deltaTime;\r\n    this.timeScale = 1;\r\n    this.smoothTimeScale = this.timeScale;\r\n  }\r\n\r\n  _update() {\r\n    requestAnimationFrame(this._updateBinded);\r\n\r\n    this.time = window.performance.now() * 0.001;\r\n    this.deltaTime = this.time - this._previousTime;\r\n    this.smoothDeltatime += (this.deltaTime - this.smoothDeltatime) * .05;\r\n    this.timeScale = this.deltaTime / DELTA_TIME_BASE;\r\n    this.smoothTimeScale = this.smoothDeltatime / DELTA_TIME_BASE;\r\n    this._previousTime = this.time;\r\n\r\n    this.dispatch();\r\n  }\r\n}\r\n\r\nexport default new Ticker();\r\n","import Ticker from \"../../dlib/util/Ticker.js\";\r\n\r\nexport default class TickerElement extends HTMLElement {\r\n  constructor({ autoplay = false, background = false } = {}) {\r\n    super();\r\n\r\n    this._autoplay = autoplay || this.hasAttribute(\"autoplay\");\r\n    this._background = background || this.hasAttribute(\"background\");\r\n\r\n    this._paused = true;\r\n    this._pausedByUser = true;\r\n    this._pausedByBlur = false;\r\n\r\n    this._updateBinded = this.update.bind(this);\r\n    this._onFocusChangeBinded = this._onFocusChange.bind(this);\r\n  }\r\n\r\n  connectedCallback() {\r\n    if (!this._background) {\r\n      window.top.addEventListener(\"blur\", this._onFocusChangeBinded);\r\n      window.top.addEventListener(\"focus\", this._onFocusChangeBinded);\r\n      document.addEventListener(\"visibilitychange\", this._onFocusChangeBinded);\r\n    }\r\n    if (this._autoplay) {\r\n      if (!window.top.document.hasFocus() && !this._background) {\r\n        this._pausedByBlur = true;\r\n        requestAnimationFrame(this._updateBinded);\r\n      }\r\n      this.play();\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this._pausedByBlur = true;\r\n    window.top.removeEventListener(\"blur\", this._onFocusChangeBinded);\r\n    window.top.removeEventListener(\"focus\", this._onFocusChangeBinded);\r\n    document.removeEventListener(\"visibilitychange\", this._onFocusChangeBinded);\r\n  }\r\n\r\n  get paused() {\r\n    return this._paused;\r\n  }\r\n\r\n  get _pausedByUser() {\r\n    return this.__pausedByUser;\r\n  }\r\n\r\n  set _pausedByUser(value) {\r\n    this.__pausedByUser = value;\r\n    this._updatePlaybackState();\r\n  }\r\n\r\n  get _pausedByBlur() {\r\n    return this.__pausedByBlur;\r\n  }\r\n\r\n  set _pausedByBlur(value) {\r\n    this.__pausedByBlur = value;\r\n    this._updatePlaybackState();\r\n  }\r\n\r\n  _onFocusChange(event) {\r\n    switch (event.type) {\r\n      case \"visibilitychange\":\r\n        if (document.visibilityState !== \"visible\") {\r\n          this._pausedByBlur = true;\r\n        }\r\n        break;\r\n      case \"blur\":\r\n        this._pausedByBlur = true;\r\n        break;\r\n      case \"focus\":\r\n        this._pausedByBlur = false;\r\n        break;\r\n    }\r\n  }\r\n\r\n  _updatePlaybackState() {\r\n    const paused = this._pausedByUser || this._pausedByBlur;\r\n\r\n    if (paused === this._paused) {\r\n      return;\r\n    }\r\n\r\n    this._paused = paused;\r\n\r\n    if (this._paused) {\r\n      Ticker.delete(this._updateBinded);\r\n      this.dispatchEvent(new Event(\"pause\"));\r\n    } else {\r\n      Ticker.add(this._updateBinded);\r\n      this.dispatchEvent(new Event(\"play\"));\r\n    }\r\n  }\r\n\r\n  play() {\r\n    this._pausedByUser = false;\r\n  }\r\n\r\n  pause() {\r\n    this._pausedByUser = true;\r\n  }\r\n\r\n  update() { }\r\n}\r\n","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as mat4 from \"../../gl-matrix/esm/mat4.js\";\r\n\r\nexport default class Matrix4 extends Float32Array {\r\n  constructor(array = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]) {\r\n    super(array);\r\n    return this;\r\n  }\r\n\r\n  set x(value) {\r\n    this[12] = value;\r\n  }\r\n\r\n  get x() {\r\n    return this[12];\r\n  }\r\n\r\n  set y(value) {\r\n    this[13] = value;\r\n  }\r\n\r\n  get y() {\r\n    return this[13];\r\n  }\r\n\r\n  set z(value) {\r\n    this[14] = value;\r\n  }\r\n\r\n  get z() {\r\n    return this[14];\r\n  }\r\n\r\n  set w(value) {\r\n    this[15] = value;\r\n  }\r\n\r\n  get w() {\r\n    return this[15];\r\n  }\r\n\r\n  set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n    if (m00.length) {\r\n      return this.copy(m00);\r\n    }\r\n    mat4.set(this, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\r\n    return this;\r\n  }\r\n\r\n  translate(vector3, matrix4 = this) {\r\n    mat4.translate(this, matrix4, vector3);\r\n    return this;\r\n  }\r\n\r\n  rotateX(value, matrix4 = this) {\r\n    mat4.rotateX(this, matrix4, value);\r\n    return this;\r\n  }\r\n\r\n  rotateY(value, matrix4 = this) {\r\n    mat4.rotateY(this, matrix4, value);\r\n    return this;\r\n  }\r\n\r\n  rotateZ(value, matrix4 = this) {\r\n    mat4.rotateZ(this, matrix4, value);\r\n    return this;\r\n  }\r\n\r\n  scale(value, matrix4 = this) {\r\n    mat4.scale(this, matrix4, typeof value === \"number\" ? [value, value, value] : value);\r\n    return this;\r\n  }\r\n\r\n  multiply(matrix4a, matrix4b) {\r\n    if (matrix4b) {\r\n      mat4.multiply(this, matrix4a, matrix4b);\r\n    } else {\r\n      mat4.multiply(this, this, matrix4a);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  identity() {\r\n    mat4.identity(this);\r\n    return this;\r\n  }\r\n\r\n  copy(matrix4) {\r\n    mat4.copy(this, matrix4);\r\n    return this;\r\n  }\r\n\r\n  fromPerspective({ fov, aspectRatio, near, far }) {\r\n    mat4.perspective(this, fov, aspectRatio, near, far);\r\n    return this;\r\n  }\r\n\r\n  fromQuaternion(quaternion) {\r\n    mat4.fromQuat(this, quaternion);\r\n    return this;\r\n  }\r\n\r\n  setPosition(vector3) {\r\n    this.x = vector3[0];\r\n    this.y = vector3[1];\r\n    this.z = vector3[2];\r\n    return this;\r\n  }\r\n\r\n  invert(matrix4 = this) {\r\n    mat4.invert(this, matrix4);\r\n    return this;\r\n  }\r\n}\r\n","import Matrix4 from \"../math/Matrix4.js\";\r\n\r\nexport default class Camera {\r\n  constructor({ near = 0.01, far = 1000, aspectRatio = 1, fov = Math.PI / 3 } = {}) {\r\n    this._near = near;\r\n    this._far = far;\r\n    this._aspectRatio = aspectRatio;\r\n    this._fov = fov;\r\n\r\n    this.transform = new Matrix4();\r\n    this._inverseTransform = new Matrix4();\r\n    this._projection = new Matrix4();\r\n    this._projectionView = new Matrix4();\r\n\r\n    this._updateProjection();\r\n  }\r\n\r\n  set near(value) {\r\n    this._near = value;\r\n    this._updateProjection();\r\n  }\r\n\r\n  get near() {\r\n    return this._near;\r\n  }\r\n\r\n  set far(value) {\r\n    this._far = value;\r\n    this._updateProjection();\r\n  }\r\n\r\n  get far() {\r\n    return this._far;\r\n  }\r\n\r\n  set fov(value) {\r\n    this._fov = value;\r\n    this._updateProjection();\r\n  }\r\n\r\n  get fov() {\r\n    return this._fov;\r\n  }\r\n\r\n  set aspectRatio(value) {\r\n    this._aspectRatio = value;\r\n    this._updateProjection();\r\n  }\r\n\r\n  get aspectRatio() {\r\n    return this._aspectRatio;\r\n  }\r\n\r\n  get inverseTransform() {\r\n    return this._inverseTransform.invert(this.transform);\r\n  }\r\n\r\n  get projection() {\r\n    return this._projection;\r\n  }\r\n\r\n  get projectionView() {\r\n    return this._projectionView.set(this.projection).multiply(this.inverseTransform);\r\n  }\r\n\r\n  _updateProjection() {\r\n    this._projection.fromPerspective(this);\r\n  }\r\n}\r\n\r\nObject.defineProperty(Camera.prototype, \"near\", { enumerable: true });\r\nObject.defineProperty(Camera.prototype, \"far\", { enumerable: true });\r\nObject.defineProperty(Camera.prototype, \"fov\", { enumerable: true });\r\nObject.defineProperty(Camera.prototype, \"aspectRatio\", { enumerable: true });\r\nObject.defineProperty(Camera.prototype, \"inverseTransform\", { enumerable: true });\r\nObject.defineProperty(Camera.prototype, \"projection\", { enumerable: true });\r\nObject.defineProperty(Camera.prototype, \"projectionView\", { enumerable: true });\r\n","// From https://github.com/mrdoob/three.js/blob/master/src/geometries/BoxGeometry.js\r\n\r\nexport default class BoxMesh {\r\n  constructor({\r\n    width = 1,\r\n    height = 1,\r\n    depth = 1,\r\n    widthSegments = 1,\r\n    heightSegments = 1,\r\n    depthSegments = 1,\r\n    positions = true,\r\n    normals = true,\r\n    uvs = true,\r\n    indices = true,\r\n  }) {\r\n    const indicesArray = [];\r\n    const verticesArray = [];\r\n    const normalsArray = [];\r\n    const uvsArray = [];\r\n\r\n    let numberOfVertices = 0;\r\n\r\n    buildPlane(\"z\", \"y\", \"x\", - 1, - 1, depth, height, width, depthSegments, heightSegments);\r\n    buildPlane(\"z\", \"y\", \"x\", 1, - 1, depth, height, - width, depthSegments, heightSegments);\r\n    buildPlane(\"x\", \"z\", \"y\", 1, 1, width, depth, height, widthSegments, depthSegments);\r\n    buildPlane(\"x\", \"z\", \"y\", 1, - 1, width, depth, - height, widthSegments, depthSegments);\r\n    buildPlane(\"x\", \"y\", \"z\", 1, - 1, width, height, depth, widthSegments, heightSegments);\r\n    buildPlane(\"x\", \"y\", \"z\", - 1, - 1, width, height, - depth, widthSegments, heightSegments);\r\n\r\n    if (positions) {\r\n      this.positions = new Float32Array(verticesArray);\r\n    }\r\n\r\n    if (normals) {\r\n      this.normals = new Float32Array(normalsArray);\r\n    }\r\n\r\n    if (uvs) {\r\n      this.uvs = new Float32Array(uvsArray);\r\n    }\r\n\r\n    if (indices) {\r\n      this.indices = new Uint16Array(indicesArray);\r\n    }\r\n\r\n    function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {\r\n      const segmentWidth = width / gridX;\r\n      const segmentHeight = height / gridY;\r\n\r\n      const widthHalf = width / 2;\r\n      const heightHalf = height / 2;\r\n      const depthHalf = depth / 2;\r\n\r\n      const gridX1 = gridX + 1;\r\n      const gridY1 = gridY + 1;\r\n\r\n      let vertexCounter = 0;\r\n\r\n      let ix; let iy;\r\n\r\n      const vector = {\r\n        x: 0,\r\n        y: 0,\r\n        z: 0,\r\n      };\r\n\r\n      for (iy = 0; iy < gridY1; iy++) {\r\n        const y = iy * segmentHeight - heightHalf;\r\n\r\n        for (ix = 0; ix < gridX1; ix++) {\r\n          const x = ix * segmentWidth - widthHalf;\r\n\r\n          vector[u] = x * udir;\r\n          vector[v] = y * vdir;\r\n          vector[w] = depthHalf;\r\n\r\n          if (positions) {\r\n            verticesArray.push(vector.x, vector.y, vector.z);\r\n          }\r\n\r\n          vector[u] = 0;\r\n          vector[v] = 0;\r\n          vector[w] = depth > 0 ? 1 : - 1;\r\n\r\n          if (normals) {\r\n            normalsArray.push(vector.x, vector.y, vector.z);\r\n          }\r\n\r\n          if (uvs) {\r\n            uvsArray.push(ix / gridX);\r\n            uvsArray.push(1 - (iy / gridY));\r\n          }\r\n\r\n          vertexCounter += 1;\r\n        }\r\n      }\r\n\r\n      if (indices) {\r\n        for (iy = 0; iy < gridY; iy++) {\r\n          for (ix = 0; ix < gridX; ix++) {\r\n            const a = numberOfVertices + ix + gridX1 * iy;\r\n            const b = numberOfVertices + ix + gridX1 * (iy + 1);\r\n            const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);\r\n            const d = numberOfVertices + (ix + 1) + gridX1 * iy;\r\n\r\n            indicesArray.push(a, b, d);\r\n            indicesArray.push(b, c, d);\r\n          }\r\n        }\r\n      }\r\n\r\n      numberOfVertices += vertexCounter;\r\n    }\r\n  }\r\n}\r\n","export default class GLBuffer {\r\n  constructor({\r\n    gl,\r\n    data = null,\r\n    target = gl.ARRAY_BUFFER,\r\n    usage = gl.STATIC_DRAW,\r\n  } = { gl }) {\r\n    this.gl = gl;\r\n    this.target = target;\r\n    this.usage = usage;\r\n\r\n    this._buffer = this.gl.createBuffer();\r\n\r\n    if (data) {\r\n      this.data = data;\r\n    }\r\n  }\r\n\r\n  set data(value) {\r\n    this._data = value;\r\n\r\n    this.bind();\r\n    this.gl.bufferData(this.target, this._data, this.usage);\r\n    this.unbind();\r\n  }\r\n\r\n  get data() {\r\n    return this._data;\r\n  }\r\n\r\n  bind({\r\n    target = this.target,\r\n    index = undefined,\r\n    offset = 0,\r\n    size = undefined,\r\n  } = {}) {\r\n    if (index === undefined) {\r\n      this.gl.bindBuffer(target, this._buffer);\r\n    } else if (size === undefined) {\r\n      this.gl.bindBufferBase(target, index, this._buffer);\r\n    } else {\r\n      this.gl.bindBufferRange(target, index, this._buffer, offset, size);\r\n    }\r\n  }\r\n\r\n  unbind({\r\n    target = this.target,\r\n    index = undefined,\r\n    offset = 0,\r\n    size = undefined,\r\n  } = {}) {\r\n    if (index === undefined) {\r\n      this.gl.bindBuffer(target, null);\r\n    } else if (size === undefined) {\r\n      this.gl.bindBufferBase(target, index, null);\r\n    } else {\r\n      this.gl.bindBufferRange(target, index, null, offset, size);\r\n    }\r\n  }\r\n}\r\n","import GLBuffer from \"./GLBuffer.js\";\r\n\r\nexport default class GLVertexAttribute {\r\n  constructor({\r\n    gl,\r\n    data = undefined,\r\n    buffer = new GLBuffer({\r\n      gl,\r\n    }),\r\n    size = 1,\r\n    type = undefined,\r\n    offset = 0,\r\n    normalized = false,\r\n    stride = 0,\r\n    count = undefined,\r\n    divisor = 0,\r\n  } = { gl }) {\r\n    this.gl = gl;\r\n    this.buffer = buffer;\r\n    this.size = size;\r\n    this.type = type;\r\n    this.offset = offset;\r\n    this.normalized = normalized;\r\n    this.stride = stride;\r\n    this.count = count;\r\n    this.divisor = divisor;\r\n\r\n    if (data) {\r\n      this.data = data;\r\n    }\r\n  }\r\n\r\n  set count(value) {\r\n    this._count = value;\r\n  }\r\n\r\n  get count() {\r\n    return this._count === undefined ? this.data.length / this.size : this._count;\r\n  }\r\n\r\n  set type(value) {\r\n    this._type = value;\r\n  }\r\n\r\n  get type() {\r\n    let type = this._type;\r\n    if (!type) {\r\n      if (this.data instanceof Float32Array || this.data instanceof Float64Array) {\r\n        type = this.gl.FLOAT;\r\n      } else if (this.data instanceof Uint8Array) {\r\n        type = this.gl.UNSIGNED_BYTE;\r\n      } else if (this.data instanceof Uint16Array) {\r\n        type = this.gl.UNSIGNED_SHORT;\r\n      } else if (this.data instanceof Uint32Array) {\r\n        type = this.gl.UNSIGNED_INT;\r\n      }\r\n    }\r\n    return type;\r\n  }\r\n\r\n  set data(value) {\r\n    this.buffer.data = value;\r\n  }\r\n\r\n  get data() {\r\n    return this.buffer.data;\r\n  }\r\n}\r\n","import GLBuffer from \"./GLBuffer.js\";\r\nimport GLVertexAttribute from \"./GLVertexAttribute.js\";\r\n\r\nexport default class GLMesh {\r\n  constructor({\r\n    gl,\r\n    positions = undefined,\r\n    normals = undefined,\r\n    uvs = undefined,\r\n    attributes = undefined,\r\n    indices = undefined,\r\n  } = { gl }) {\r\n    this.gl = gl;\r\n\r\n    this.gl.getExtension(\"OES_element_index_uint\");\r\n\r\n    this._drawElementsInstanced = () => { };\r\n    this._drawArraysInstanced = () => { };\r\n    const instancedArraysExtension = this.gl.getExtension(\"ANGLE_instanced_arrays\");\r\n    if (instancedArraysExtension) {\r\n      this._drawElementsInstanced = instancedArraysExtension.drawElementsInstancedANGLE.bind(instancedArraysExtension);\r\n      this._drawArraysInstanced = instancedArraysExtension.drawArraysInstancedANGLE.bind(instancedArraysExtension);\r\n    } else if (this.gl.drawElementsInstanced) {\r\n      this._drawElementsInstanced = this.gl.drawElementsInstanced.bind(this.gl);\r\n      this._drawArraysInstanced = this.gl.drawArraysInstanced.bind(this.gl);\r\n    }\r\n\r\n    this.attributes = new Map(attributes);\r\n\r\n    if (positions) {\r\n      this.attributes.set(\"position\", new GLVertexAttribute({\r\n        gl,\r\n        data: positions,\r\n        size: 3,\r\n      }));\r\n    }\r\n\r\n    if (normals) {\r\n      this.attributes.set(\"normal\", new GLVertexAttribute({\r\n        gl,\r\n        data: normals,\r\n        size: 3,\r\n      }));\r\n    }\r\n\r\n    if (uvs) {\r\n      this.attributes.set(\"uv\", new GLVertexAttribute({\r\n        gl,\r\n        data: uvs,\r\n        size: 2,\r\n      }));\r\n    }\r\n\r\n    for (const [key, value] of this.attributes) {\r\n      if (!(value instanceof GLVertexAttribute)) {\r\n        this.attributes.set(key, new GLVertexAttribute(Object.assign({ gl }, value)));\r\n      }\r\n    }\r\n\r\n    if (indices && !(this.indices instanceof GLVertexAttribute)) {\r\n      this.indices = new GLVertexAttribute(Object.assign({\r\n        gl: this.gl,\r\n        buffer: new GLBuffer({\r\n          gl: this.gl,\r\n          target: this.gl.ELEMENT_ARRAY_BUFFER,\r\n        }),\r\n      }, indices.length !== undefined ? { data: indices } : indices));\r\n    }\r\n  }\r\n\r\n  draw({\r\n    mode = this.gl.TRIANGLES,\r\n    elements = !!this.indices,\r\n    count = elements ? this.indices.count : this.attributes.get(\"position\").count,\r\n    offset = this.indices ? this.indices.offset : 0,\r\n    type = elements ? this.indices.type : null,\r\n    first = 0,\r\n    instanceCount = undefined,\r\n  } = {}) {\r\n    if (elements) {\r\n      if (instanceCount !== undefined) {\r\n        this._drawElementsInstanced(mode, count, type, offset, instanceCount);\r\n      } else {\r\n        this.gl.drawElements(mode, count, type, offset);\r\n      }\r\n    } else {\r\n      if (instanceCount !== undefined) {\r\n        this._drawArraysInstanced(mode, first, count, instanceCount);\r\n      } else {\r\n        this.gl.drawArrays(mode, first, count);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import * as vec2 from \"../../gl-matrix/esm/vec2.js\";\r\n\r\nexport default class Vector2 extends Float32Array {\r\n  static distance(vector2a, vector2b) {\r\n    return vec2.distance(vector2a, vector2b);\r\n  }\r\n\r\n  constructor(array = [0, 0]) {\r\n    super(array);\r\n    return this;\r\n  }\r\n\r\n  get x() {\r\n    return this[0];\r\n  }\r\n\r\n  set x(value) {\r\n    this[0] = value;\r\n  }\r\n\r\n  get y() {\r\n    return this[1];\r\n  }\r\n\r\n  set y(value) {\r\n    this[1] = value;\r\n  }\r\n\r\n  set(x, y) {\r\n    vec2.set(this, x, y);\r\n    return this;\r\n  }\r\n\r\n  copy(vector2) {\r\n    vec2.copy(this, vector2);\r\n    return this;\r\n  }\r\n\r\n  add(vector2) {\r\n    vec2.add(this, this, vector2);\r\n    return this;\r\n  }\r\n\r\n  get size() {\r\n    return vec2.length(this);\r\n  }\r\n\r\n  get squaredSize() {\r\n    return vec2.squaredLength(this);\r\n  }\r\n\r\n  subtract(vector2) {\r\n    vec2.subtract(this, this, vector2);\r\n    return this;\r\n  }\r\n\r\n  negate(vector2 = this) {\r\n    vec2.negate(this, vector2);\r\n    return this;\r\n  }\r\n\r\n  cross(vector2a, vector2b) {\r\n    vec2.cross(this, vector2a, vector2b);\r\n    return this;\r\n  }\r\n\r\n  scale(value) {\r\n    vec2.scale(this, this, value);\r\n    return this;\r\n  }\r\n\r\n  normalize() {\r\n    vec2.normalize(this, this);\r\n  }\r\n\r\n  dot(vector2) {\r\n    return vec2.dot(this, vector2);\r\n  }\r\n\r\n  distance(vector2) {\r\n    return Vector2.distance(this, vector2);\r\n  }\r\n\r\n  equals(vector2) {\r\n    return vec2.exactEquals(this, vector2);\r\n  }\r\n\r\n  applyMatrix3(matrix3) {\r\n    vec2.transformMat3(this, this, matrix3);\r\n    return this;\r\n  }\r\n\r\n  applyMatrix4(matrix4) {\r\n    vec2.transformMat4(this, this, matrix4);\r\n    return this;\r\n  }\r\n\r\n  lerp(vector2, value) {\r\n    vec2.lerp(this, this, vector2, value);\r\n  }\r\n\r\n  clone() {\r\n    return new Vector2(this);\r\n  }\r\n}\r\n","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as vec3 from \"../../gl-matrix/esm/vec3.js\";\r\n\r\nexport default class Vector3 extends Float32Array {\r\n  constructor(array = [0, 0, 0]) {\r\n    super(array);\r\n    return this;\r\n  }\r\n\r\n  get x() {\r\n    return this[0];\r\n  }\r\n\r\n  set x(value) {\r\n    this[0] = value;\r\n  }\r\n\r\n  get y() {\r\n    return this[1];\r\n  }\r\n\r\n  set y(value) {\r\n    this[1] = value;\r\n  }\r\n\r\n  get z() {\r\n    return this[2];\r\n  }\r\n\r\n  set z(value) {\r\n    this[2] = value;\r\n  }\r\n\r\n  set(x, y, z) {\r\n    vec3.set(this, x, y, z);\r\n    return this;\r\n  }\r\n\r\n  copy(vector3) {\r\n    vec3.copy(this, vector3);\r\n    return this;\r\n  }\r\n\r\n  add(vector3) {\r\n    vec3.add(this, this, vector3);\r\n    return this;\r\n  }\r\n\r\n  get size() {\r\n    return vec3.length(this);\r\n  }\r\n\r\n  get squaredSize() {\r\n    return vec3.squaredLength(this);\r\n  }\r\n\r\n  distance(vector3) {\r\n    return vec3.distance(this, vector3);\r\n  }\r\n\r\n  squaredDistance(vector3) {\r\n    return vec3.squaredDistance(this, vector3);\r\n  }\r\n\r\n  subtract(vector3) {\r\n    vec3.subtract(this, this, vector3);\r\n    return this;\r\n  }\r\n\r\n  negate(vector3 = this) {\r\n    vec3.negate(this, vector3);\r\n    return this;\r\n  }\r\n\r\n  cross(vector3a, vector3b) {\r\n    vec3.cross(this, vector3a, vector3b);\r\n    return this;\r\n  }\r\n\r\n  scale(value) {\r\n    vec3.scale(this, this, value);\r\n    return this;\r\n  }\r\n\r\n  normalize() {\r\n    vec3.normalize(this, this);\r\n    return this;\r\n  }\r\n\r\n  dot(vector3) {\r\n    return vec3.dot(this, vector3);\r\n  }\r\n\r\n  equals(vector3) {\r\n    return vec3.exactEquals(this, vector3);\r\n  }\r\n\r\n  applyMatrix4(matrix4) {\r\n    vec3.transformMat4(this, this, matrix4);\r\n    return this;\r\n  }\r\n\r\n  angle(vector3) {\r\n    return vec3.angle(this, vector3);\r\n  }\r\n\r\n  clone() {\r\n    return new Vector3(this);\r\n  }\r\n}\r\n","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as vec4 from \"../../gl-matrix/esm/vec4.js\";\r\n\r\nexport default class Vector4 extends Float32Array {\r\n  constructor(array = [0, 0, 0, 0]) {\r\n    super(array);\r\n    return this;\r\n  }\r\n\r\n  get x() {\r\n    return this[0];\r\n  }\r\n\r\n  set x(value) {\r\n    this[0] = value;\r\n  }\r\n\r\n  get y() {\r\n    return this[1];\r\n  }\r\n\r\n  set y(value) {\r\n    this[1] = value;\r\n  }\r\n\r\n  get z() {\r\n    return this[2];\r\n  }\r\n\r\n  set z(value) {\r\n    this[2] = value;\r\n  }\r\n\r\n  get w() {\r\n    return this[3];\r\n  }\r\n\r\n  set w(value) {\r\n    this[3] = value;\r\n  }\r\n\r\n  set(x, y, z, w) {\r\n    vec4.set(this, x, y, z, w);\r\n    return this;\r\n  }\r\n}\r\n","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n;\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as mat3 from \"../../gl-matrix/esm/mat3.js\";\r\n\r\nexport default class Matrix3 extends Float32Array {\r\n  constructor(array = [1, 0, 0, 0, 1, 0, 0, 0, 1]) {\r\n    super(array);\r\n    return this;\r\n  }\r\n\r\n  set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n    mat3.set(this, m00, m01, m02, m10, m11, m12, m20, m21, m22);\r\n    return this;\r\n  }\r\n\r\n  translate(vector2, matrix3 = this) {\r\n    mat3.translate(this, matrix3, vector2);\r\n    return this;\r\n  }\r\n\r\n  rotate(value, matrix3 = this) {\r\n    mat3.rotate(this, matrix3, value);\r\n    return this;\r\n  }\r\n\r\n  scale(vector2, matrix3 = this) {\r\n    mat3.scale(this, matrix3, vector2);\r\n    return this;\r\n  }\r\n\r\n  multiply(matrix3a, matrix3b) {\r\n    if (matrix3b) {\r\n      mat3.multiply(this, matrix3a, matrix3b);\r\n    } else {\r\n      mat3.multiply(this, this, matrix3a);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  identity() {\r\n    mat3.identity(this);\r\n    return this;\r\n  }\r\n\r\n  copy(matrix3) {\r\n    mat3.copy(this, matrix3);\r\n    return this;\r\n  }\r\n\r\n  fromMatrix4(matrix4) {\r\n    mat3.fromMat4(this, matrix4);\r\n    return this;\r\n  }\r\n\r\n  fromQuaternion(quaternion) {\r\n    mat3.fromQuat(this, quaternion);\r\n    return this;\r\n  }\r\n\r\n  fromBasis(vector3a, vector3b, vector3c) {\r\n    this.set(\r\n      vector3a[0],\r\n      vector3a[1],\r\n      vector3a[2],\r\n      vector3b[0],\r\n      vector3b[1],\r\n      vector3b[2],\r\n      vector3c[0],\r\n      vector3c[1],\r\n      vector3c[2]\r\n    );\r\n    return this;\r\n  }\r\n\r\n  invert(matrix3 = this) {\r\n    mat3.invert(this, matrix3);\r\n    return this;\r\n  }\r\n}\r\n","export default class Shader {\r\n  static add(string = \"void main() {}\", chunks) {\r\n    for (const [key, chunk] of chunks) {\r\n      switch (key) {\r\n        case \"start\":\r\n          string = string.replace(/^(#version .*?\\n(\\s*precision highp float;\\s)?)?([\\s\\S]*)/, `$1\\n${chunk}\\n$3`);\r\n          break;\r\n        case \"end\":\r\n          string = string.replace(/(}\\s*$)/, `\\n${chunk}\\n$1`);\r\n          break;\r\n        case \"main\":\r\n          string = string.replace(/(\\bvoid\\b +\\bmain\\b[\\s\\S]*?{\\s*)/, `$1\\n${chunk}\\n`);\r\n          break;\r\n        default:\r\n          string = string.replace(key, chunk);\r\n      }\r\n    }\r\n\r\n    return string;\r\n  }\r\n\r\n  constructor({\r\n    vertexShader = `#version 300 es\r\n      void main() {\r\n        gl_Position = vec4(0., 0., 0., 1.);\r\n      }\r\n    `,\r\n    fragmentShader = `#version 300 es\r\n      precision highp float;\r\n\r\n      out vec4 fragColor;\r\n\r\n      void main() {\r\n        fragColor = vec4(1.);\r\n      }\r\n    `,\r\n    dataTypeConctructors = {\r\n      Vector2: class Vector2 extends Float32Array {\r\n        constructor() {\r\n          super(2);\r\n        }\r\n      },\r\n      Vector3: class Vector3 extends Float32Array {\r\n        constructor() {\r\n          super(3);\r\n        }\r\n      },\r\n      Vector4: class Vector4 extends Float32Array {\r\n        constructor() {\r\n          super(4);\r\n        }\r\n      },\r\n      Matrix3: class Matrix3 extends Float32Array {\r\n        constructor() {\r\n          super([1, 0, 0, 0, 1, 0, 0, 0, 1]);\r\n        }\r\n      },\r\n      Matrix4: class Matrix4 extends Float32Array {\r\n        constructor() {\r\n          super([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\r\n        }\r\n      },\r\n      Texture: class Texture { },\r\n      TextureCube: class TextureCube { },\r\n    },\r\n    uniforms = [],\r\n    vertexShaderChunks = [],\r\n    fragmentShaderChunks = [],\r\n    shaders = [],\r\n  } = {}) {\r\n    this.uniforms = new Map();\r\n    this.uniformTypes = new Map();\r\n\r\n    this._dataTypeConctructors = dataTypeConctructors;\r\n\r\n    this.vertexShader = vertexShader;\r\n    this.fragmentShader = fragmentShader;\r\n    this._vertexShaderChunks = [];\r\n    this._fragmentShaderChunks = [];\r\n\r\n    this.add({ vertexShaderChunks, fragmentShaderChunks, uniforms });\r\n\r\n    for (const shader of shaders) {\r\n      this.add(shader);\r\n    }\r\n  }\r\n\r\n  add({ vertexShaderChunks = [], fragmentShaderChunks = [], uniforms = [] } = {}) {\r\n    this.vertexShader = Shader.add(this.vertexShader, vertexShaderChunks);\r\n    this._vertexShaderChunks.push(...vertexShaderChunks);\r\n    this.fragmentShader = Shader.add(this.fragmentShader, fragmentShaderChunks);\r\n    this._fragmentShaderChunks.push(...fragmentShaderChunks);\r\n    for (const [key, value] of uniforms) {\r\n      this.uniforms.set(key, value);\r\n    }\r\n  }\r\n\r\n  set vertexShader(value) {\r\n    this._vertexShader = value;\r\n    this._parseUniforms(this._vertexShader);\r\n  }\r\n\r\n  get vertexShader() {\r\n    return this._vertexShader;\r\n  }\r\n\r\n  set fragmentShader(value) {\r\n    this._fragmentShader = value;\r\n    this._parseUniforms(this._fragmentShader);\r\n  }\r\n\r\n  get fragmentShader() {\r\n    return this._fragmentShader;\r\n  }\r\n\r\n  get vertexShaderChunks() {\r\n    return this._vertexShaderChunks;\r\n  }\r\n\r\n  get fragmentShaderChunks() {\r\n    return this._fragmentShaderChunks;\r\n  }\r\n\r\n  _addUniform(name, type, arrayLength) {\r\n    if (this.uniforms.has(name)) {\r\n      return;\r\n    }\r\n\r\n    let value;\r\n    let typeMatch;\r\n\r\n    this.uniformTypes.set(name, type);\r\n\r\n    if (/float|double/.test(type)) {\r\n      if (isNaN(arrayLength)) {\r\n        value = 0;\r\n      } else {\r\n        value = new Array(arrayLength).fill(0);\r\n      }\r\n    } else if (/int|uint/.test(type)) {\r\n      if (isNaN(arrayLength)) {\r\n        value = 0;\r\n      } else {\r\n        value = new Array(arrayLength).fill(0);\r\n      }\r\n    } else if (/sampler2D/.test(type)) {\r\n      if (isNaN(arrayLength)) {\r\n        value = new this._dataTypeConctructors[\"Texture\"]();\r\n      } else {\r\n        value = new Array(arrayLength).fill(undefined).map((value) => new this._dataTypeConctructors[\"Texture\"]());\r\n      }\r\n    } else if (/samplerCube/.test(type)) {\r\n      if (isNaN(arrayLength)) {\r\n        value = new this._dataTypeConctructors[\"TextureCube\"]();\r\n      } else {\r\n        value = new Array(arrayLength).fill(undefined).map((value) => new this._dataTypeConctructors[\"TextureCube\"]());\r\n      }\r\n    } else if ((typeMatch = /(.?)vec(\\d)/.exec(type))) {\r\n      const vectorLength = typeMatch[2];\r\n      if (isNaN(arrayLength)) {\r\n        value = new this._dataTypeConctructors[`Vector${vectorLength}`]();\r\n      } else {\r\n        value = new Array(arrayLength).fill(undefined).map((value) => new this._dataTypeConctructors[`Vector${vectorLength}`]());\r\n      }\r\n    } else if ((typeMatch = /mat(\\d)/.exec(type))) {\r\n      const matrixLength = typeMatch[1];\r\n      if (isNaN(arrayLength)) {\r\n        value = new this._dataTypeConctructors[`Matrix${matrixLength}`]();\r\n      } else {\r\n        value = new Array(arrayLength).fill(undefined).map((value) => new this._dataTypeConctructors[`Matrix${matrixLength}`]());\r\n      }\r\n    } else {\r\n      value = undefined;\r\n    }\r\n\r\n    this.uniforms.set(name, value);\r\n  }\r\n\r\n  // Parse shader strings to extract uniforms\r\n\r\n  _parseUniforms(string) {\r\n    const structures = new Map();\r\n\r\n    const structRegExp = /struct\\s*(.*)\\s*{\\s*([\\s\\S]*?)}/g;\r\n    const structMemberRegExp = /^\\s*(.[^ ]+) (.[^ ;[\\]]+)\\[? *(\\d+)? *\\]?/gm;\r\n    let structMatch;\r\n    while ((structMatch = structRegExp.exec(string))) {\r\n      const structName = structMatch[1];\r\n      const structString = structMatch[2];\r\n\r\n      const structure = {};\r\n      let structMemberMatch;\r\n      while ((structMemberMatch = structMemberRegExp.exec(structString))) {\r\n        const [, type, name, arrayLengthStr] = structMemberMatch;\r\n        const arrayLength = parseInt(arrayLengthStr);\r\n        structure[name] = {\r\n          type,\r\n          arrayLength,\r\n        };\r\n      }\r\n\r\n      structures.set(structName, structure);\r\n    }\r\n\r\n    const uniformsRegExp = /^\\s*uniform (.[^ ]+) (.[^ ;[\\]]+)\\[? *(\\d+)? *\\]?/gm;\r\n    let uniformMatch;\r\n    while ((uniformMatch = uniformsRegExp.exec(string))) {\r\n      const [, type, name, arrayLengthStr] = uniformMatch;\r\n\r\n      const structure = structures.get(type);\r\n      if (structure) {\r\n        for (const key in structure) {\r\n          this._addUniform(`${name}.${key}`, structure[key].type, structure[key].arrayLength);\r\n        }\r\n      } else {\r\n        const arrayLength = parseInt(arrayLengthStr);\r\n        this._addUniform(name, type, arrayLength);\r\n      }\r\n    }\r\n  }\r\n}\r\n","export default class GLTexture {\r\n  constructor({\r\n    gl, \r\n    data = undefined, \r\n    width = undefined,\r\n    height = undefined,\r\n    target = (data && data.length) ? gl.TEXTURE_CUBE_MAP : gl.TEXTURE_2D,\r\n    level = 0,\r\n    internalFormat = gl.RGBA8 || gl.RGBA,\r\n    format = gl.RGBA,\r\n    type = gl.UNSIGNED_BYTE,\r\n    minFilter = gl.NEAREST_MIPMAP_LINEAR, \r\n    magFilter = gl.LINEAR, \r\n    wrapS = gl.REPEAT, \r\n    wrapT = gl.REPEAT\r\n  } = {gl}) {\r\n    this.gl = gl;\r\n    this._texture = this.gl.createTexture();\r\n    this._width = width;\r\n    this._height = height;\r\n    this._dataWidth = undefined;\r\n    this._dataHeight = undefined;\r\n    this._target = target;\r\n    this._unit = 0;\r\n    \r\n    this.level = level;\r\n    this.internalFormat = internalFormat;\r\n    this.format = format;\r\n    this.type = type;\r\n    this.minFilter = minFilter;\r\n    this.magFilter = magFilter;\r\n    this.wrapS = wrapS;\r\n    this.wrapT = wrapT;\r\n    this.data = data;\r\n  }\r\n\r\n  generateMipmap() {\r\n    this.bind();\r\n    this.gl.generateMipmap(this._target);\r\n    this.unbind();\r\n  }\r\n\r\n  set data(value) {\r\n    this._data = value;\r\n\r\n    if(!this._data && !(this._width && this._height)) {\r\n      return;\r\n    }\r\n\r\n    const data = (this._data && this._data.length) ? this._data : [this._data];\r\n\r\n    if(data[0]) {\r\n      this._dataWidth = data[0].width || data[0].videoWidth;\r\n      this._dataHeight = data[0].height || data[0].videoHeight;\r\n    }\r\n\r\n    const count = this._target === this.gl.TEXTURE_CUBE_MAP ? 6 : 1;\r\n    const target = this._target === this.gl.TEXTURE_CUBE_MAP ? this.gl.TEXTURE_CUBE_MAP_POSITIVE_X : this._target;\r\n\r\n    this.bind();\r\n    for (let i = 0; i < data.length; i++) {\r\n      if(this.gl.getParameter(this.gl.VERSION).startsWith(\"WebGL 1.0\") && this._dataWidth) {\r\n        this.gl.texImage2D(target + i, this.level, this.internalFormat, this.format, this.type, data[i]);\r\n      } else {\r\n        this.gl.texImage2D(target + i, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, data[i]);\r\n      }\r\n    }\r\n    this.unbind();\r\n  }\r\n\r\n  get data() {\r\n    return this._data;\r\n  }\r\n\r\n  set width(value) {\r\n    this._width = value;\r\n    this.data = this.data;\r\n  }\r\n\r\n  get width() {\r\n    return this._width || this._dataWidth;\r\n  }\r\n\r\n  set height(value) {\r\n    this._height = value;\r\n    this.data = this.data;\r\n  }\r\n\r\n  get height() {\r\n    return this._height || this._dataHeight;\r\n  }\r\n\r\n  set minFilter(value) {\r\n    if(this._minFilter === value) {\r\n      return;\r\n    }\r\n    this._minFilter = value;\r\n    this.bind();\r\n    this.gl.texParameteri(this._target, this.gl.TEXTURE_MIN_FILTER, this._minFilter);\r\n    this.unbind();\r\n  }\r\n\r\n  get minFilter() {\r\n    return this._minFilter;\r\n  }\r\n\r\n  set magFilter(value) {\r\n    if(this._magFilter === value) {\r\n      return;\r\n    }\r\n    this._magFilter = value;\r\n    this.bind();\r\n    this.gl.texParameteri(this._target, this.gl.TEXTURE_MAG_FILTER, this._magFilter);\r\n    this.unbind();\r\n  }\r\n\r\n  get magFilter() {\r\n    return this._magFilter;\r\n  }\r\n\r\n  set wrapS(value) {\r\n    if(this._wrapS === value) {\r\n      return;\r\n    }\r\n    this._wrapS = value;\r\n    this.bind();\r\n    this.gl.texParameteri(this._target, this.gl.TEXTURE_WRAP_S, this._wrapS);\r\n    this.unbind();\r\n  }\r\n\r\n  get wrapS() {\r\n    return this._wrapS;\r\n  }\r\n\r\n  set wrapT(value) {\r\n    if(this._wrapT === value) {\r\n      return;\r\n    }\r\n    this._wrapT = value;\r\n    this.bind();\r\n    this.gl.texParameteri(this._target, this.gl.TEXTURE_WRAP_T, this._wrapT);\r\n    this.unbind();\r\n  }\r\n\r\n  get wrapT() {\r\n    return this._wrapT;\r\n  }\r\n\r\n  bind({unit = 0} = {}) {\r\n    this._unit = unit;\r\n    this.gl.activeTexture(this.gl.TEXTURE0 + unit);\r\n    this.gl.bindTexture(this._target, this._texture);\r\n  }\r\n\r\n  unbind({unit = this._unit} = {}) {\r\n    this.gl.activeTexture(this.gl.TEXTURE0 + unit);\r\n    this.gl.bindTexture(this._target, null);\r\n  }\r\n\r\n  clone() {\r\n    return new GLTexture(this);\r\n  }\r\n};\r\n","import Vector2 from \"../math/Vector2.js\";\r\nimport Vector3 from \"../math/Vector3.js\";\r\nimport Vector4 from \"../math/Vector4.js\";\r\nimport Matrix3 from \"../math/Matrix3.js\";\r\nimport Matrix4 from \"../math/Matrix4.js\";\r\nimport Shader from \"../3d/Shader.js\";\r\nimport GLTexture from \"./GLTexture.js\";\r\n\r\nexport default class GLProgram extends Shader {\r\n  constructor({\r\n    gl,\r\n    vertexShader = undefined,\r\n    fragmentShader = undefined,\r\n    uniforms = undefined,\r\n    transformFeedbackVaryings = undefined,\r\n    vertexShaderChunks = undefined,\r\n    fragmentShaderChunks = undefined,\r\n    shaders = undefined,\r\n  } = { gl }) {\r\n    super({\r\n      vertexShader,\r\n      fragmentShader,\r\n      uniforms,\r\n      vertexShaderChunks,\r\n      fragmentShaderChunks,\r\n      shaders,\r\n      dataTypeConctructors: {\r\n        Vector2,\r\n        Vector3,\r\n        Vector4,\r\n        Matrix3,\r\n        Matrix4,\r\n        Texture: class extends GLTexture {\r\n          constructor() {\r\n            super({ gl });\r\n          }\r\n        },\r\n        TextureCube: class TextureCube { },\r\n      },\r\n    });\r\n\r\n    this.gl = gl;\r\n    this._program = gl.createProgram();\r\n    this._attachedShaders = new Map();\r\n\r\n    const self = this;\r\n\r\n    this._vertexAttribDivisor = function() { };\r\n    const instancedArraysExtension = this.gl.getExtension(\"ANGLE_instanced_arrays\");\r\n    if (instancedArraysExtension) {\r\n      this._vertexAttribDivisor = instancedArraysExtension.vertexAttribDivisorANGLE.bind(instancedArraysExtension);\r\n    } else if (this.gl.vertexAttribDivisor) {\r\n      this._vertexAttribDivisor = this.gl.vertexAttribDivisor.bind(this.gl);\r\n    }\r\n\r\n    class Attributes extends Map {\r\n      set(name, { buffer = undefined, location = self._attributesLocations.get(name), size = undefined, type = gl.FLOAT, normalized = false, stride = 0, offset = 0, divisor = 0 } = {}) {\r\n        if (name instanceof Map) {\r\n          for (const [key, value] of name) {\r\n            this.set(key, value);\r\n          }\r\n          return;\r\n        }\r\n        buffer.bind();\r\n        if (location === undefined) {\r\n          location = gl.getAttribLocation(self._program, name);\r\n          if (location === -1) {\r\n            console.warn(`Attribute \"${name}\" is missing or never used`);\r\n          }\r\n          self._attributesLocations.set(name, location);\r\n        }\r\n        gl.enableVertexAttribArray(location);\r\n        gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\r\n        buffer.unbind();\r\n        self._vertexAttribDivisor(location, divisor);\r\n        super.set(name, { buffer, size, type, normalized, stride, offset });\r\n      }\r\n    }\r\n\r\n    class Uniforms extends Map {\r\n      set(name, ...values) {\r\n        let value = values[0];\r\n        if (value === undefined) {\r\n          return;\r\n        }\r\n\r\n        let location = self._uniformLocations.get(name);\r\n        if (location === undefined) {\r\n          location = gl.getUniformLocation(self._program, name);\r\n          self._uniformLocations.set(name, location);\r\n        }\r\n\r\n        let texture;\r\n\r\n        if (value.length === undefined) {\r\n          if (value instanceof GLTexture) {\r\n            let unit = 0;\r\n            for (const [uniformName, type] of self.uniformTypes) {\r\n              if (type.startsWith(\"sampler\")) {\r\n                if (uniformName === name) {\r\n                  texture = value;\r\n                  values = [unit];\r\n                  break;\r\n                }\r\n                unit++;\r\n              }\r\n            }\r\n          } else if (value instanceof Object) {\r\n            for (const key in value) {\r\n              self.uniforms.set(`${name}.${key}`, value[key]);\r\n            }\r\n            return;\r\n          }\r\n          if (values.length > 1) {\r\n            value = self.uniforms.get(name);\r\n            value.set(...values);\r\n          } else {\r\n            value = values;\r\n          }\r\n        } else if (value[0] instanceof Object) {\r\n          for (let i = 0; i < value.length; i++) {\r\n            if (value[0].length) {\r\n              self.uniforms.set(`${name}[${i}]`, value[i]);\r\n            } else {\r\n              for (const key in value[i]) {\r\n                self.uniforms.set(`${name}[${i}].${key}`, value[i][key]);\r\n              }\r\n            }\r\n          }\r\n          return;\r\n        }\r\n\r\n        if (location === null) {\r\n          return;\r\n        }\r\n\r\n        const type = self.uniformTypes.get(name.replace(/\\[.*?\\]/, \"\"));\r\n\r\n        if (type === \"float\" || type === \"bool\") {\r\n          gl.uniform1fv(location, value);\r\n        } else if (type === \"vec2\") {\r\n          gl.uniform2fv(location, value);\r\n        } else if (type === \"vec3\") {\r\n          gl.uniform3fv(location, value);\r\n        } else if (type === \"vec4\") {\r\n          gl.uniform4fv(location, value);\r\n        } else if (type === \"int\" || type.startsWith(\"sampler\")) {\r\n          gl.uniform1iv(location, value);\r\n        } else if (type === \"ivec2\") {\r\n          gl.uniform2iv(location, value);\r\n        } else if (type === \"ivec3\") {\r\n          gl.uniform3iv(location, value);\r\n        } else if (type === \"ivec4\") {\r\n          gl.uniform4iv(location, value);\r\n        } else if (type === \"mat3\") {\r\n          gl.uniformMatrix3fv(location, false, value);\r\n        } else if (type === \"mat4\") {\r\n          gl.uniformMatrix4fv(location, false, value);\r\n        }\r\n\r\n        super.set(name, texture || value);\r\n      }\r\n    }\r\n\r\n    if (transformFeedbackVaryings) {\r\n      this.gl.transformFeedbackVaryings(this._program, transformFeedbackVaryings, gl.INTERLEAVED_ATTRIBS);\r\n    }\r\n\r\n    this.vertexShader = this.vertexShader;\r\n    this.fragmentShader = this.fragmentShader;\r\n\r\n    this.use();\r\n\r\n    this.attributes = new Attributes();\r\n\r\n    const rawUniforms = this.uniforms;\r\n    this.uniforms = new Uniforms();\r\n    for (const [key, value] of rawUniforms) {\r\n      this.uniforms.set(key, value);\r\n    }\r\n  }\r\n\r\n  set vertexShader(value) {\r\n    super.vertexShader = value;\r\n    if (this.gl) {\r\n      this._updateShader(this.gl.VERTEX_SHADER, this.vertexShader);\r\n    }\r\n  }\r\n\r\n  get vertexShader() {\r\n    return super.vertexShader;\r\n  }\r\n\r\n  set fragmentShader(value) {\r\n    super.fragmentShader = value;\r\n    if (this.gl) {\r\n      this._updateShader(this.gl.FRAGMENT_SHADER, this.fragmentShader);\r\n    }\r\n  }\r\n\r\n  get fragmentShader() {\r\n    return super.fragmentShader;\r\n  }\r\n\r\n  use() {\r\n    this.gl.useProgram(this._program);\r\n  }\r\n\r\n  _updateShader(type, source) {\r\n    if (!source) {\r\n      return;\r\n    }\r\n\r\n    if (this.gl.getParameter(this.gl.VERSION).startsWith(\"WebGL 1.0\")) {\r\n      source = source.replace(/#version.*?\\n/g, \"\");\r\n      source = source.replace(/\\btexture\\b/g, \"texture2D\");\r\n      if (type === this.gl.VERTEX_SHADER) {\r\n        source = source.replace(/\\bin\\b/g, \"attribute\");\r\n        source = source.replace(/\\bout\\b/g, \"varying\");\r\n      } else {\r\n        source = source.replace(/\\bin\\b/g, \"varying\");\r\n        const results = /out vec4 (.*?);/.exec(source);\r\n        if (results) {\r\n          const fragColorName = results[1];\r\n          source = source.replace(/out.*?;/, \"\");\r\n          source = source.replace(new RegExp(`\\\\b${fragColorName}\\\\b`, \"g\"), \"gl_FragColor\");\r\n        }\r\n      }\r\n    }\r\n\r\n    const shader = this.gl.createShader(type);\r\n    this.gl.shaderSource(shader, source);\r\n    this.gl.compileShader(shader);\r\n\r\n    const shaderInfoLog = this.gl.getShaderInfoLog(shader);\r\n    if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\r\n      const lineNumberResults = /ERROR: 0:(\\d+):/.exec(shaderInfoLog);\r\n      if (lineNumberResults) {\r\n        const lineNumber = parseFloat(lineNumberResults[1]);\r\n        const shaderLines = source.split(\"\\n\");\r\n        const typeName = type === this.gl.VERTEX_SHADER ? \"Vertex Shader\" : \"Fragment Shader\";\r\n        console.groupCollapsed(`${typeName} source`);\r\n        console.warn(source);\r\n        console.groupEnd();\r\n        throw new Error(`${typeName}: ${shaderInfoLog}\\nat: ${shaderLines[lineNumber - 1].replace(/^\\s*/, \"\")}`);\r\n      } else {\r\n        throw new Error(shaderInfoLog);\r\n      }\r\n    } else if (shaderInfoLog) {\r\n      console.warn(shaderInfoLog);\r\n    }\r\n\r\n    const attachedShader = this._attachedShaders.get(type);\r\n    if (attachedShader) {\r\n      this.gl.detachShader(this._program, attachedShader);\r\n      this.gl.deleteShader(attachedShader);\r\n    }\r\n\r\n    this.gl.attachShader(this._program, shader);\r\n    this.gl.deleteShader(shader);\r\n    this._attachedShaders.set(type, shader);\r\n\r\n    if (this._attachedShaders.size === 2) {\r\n      this.gl.linkProgram(this._program);\r\n      const programInfoLog = this.gl.getProgramInfoLog(this._program);\r\n      if (!this.gl.getProgramParameter(this._program, this.gl.LINK_STATUS)) {\r\n        throw new Error(programInfoLog);\r\n      } else if (programInfoLog) {\r\n        console.warn(programInfoLog);\r\n      }\r\n\r\n      // TODO: Check when issue is resolved on Safari and comment out\r\n\r\n      // for (let [type, attachedShader] of this._attachedShaders) {\r\n      //   this.gl.detachShader(this._program, attachedShader);\r\n      //   this.gl.deleteShader(attachedShader);\r\n      //   this._attachedShaders.delete(type);\r\n      // }\r\n\r\n      this._attributesLocations = new Map();\r\n      this._uniformLocations = new Map();\r\n    }\r\n  }\r\n}\r\n","export default class GLVertexArray {\r\n  constructor({\r\n    gl,\r\n    mesh = undefined,\r\n    program = undefined,\r\n  } = { gl }) {\r\n    this.gl = gl;\r\n\r\n    const extension = gl.getExtension(\"OES_vertex_array_object\");\r\n    if (extension) {\r\n      this.gl.createVertexArray = extension.createVertexArrayOES.bind(extension);\r\n      this.gl.bindVertexArray = extension.bindVertexArrayOES.bind(extension);\r\n    }\r\n\r\n    this._vertexArray = this.gl.createVertexArray();\r\n\r\n    if (mesh && program) {\r\n      this.add({\r\n        mesh,\r\n        program,\r\n      });\r\n    }\r\n  }\r\n\r\n  add({\r\n    mesh = undefined,\r\n    program = undefined,\r\n  } = {}) {\r\n    this.bind();\r\n    program.attributes.set(mesh.attributes);\r\n    if (mesh.indices) {\r\n      mesh.indices.buffer.bind();\r\n    }\r\n    this.unbind();\r\n  }\r\n\r\n  bind() {\r\n    this.gl.bindVertexArray(this._vertexArray);\r\n  }\r\n\r\n  unbind() {\r\n    this.gl.bindVertexArray(null);\r\n  }\r\n}\r\n","import GLMesh from \"./GLMesh.js\";\r\nimport GLProgram from \"./GLProgram.js\";\r\nimport GLVertexArray from \"./GLVertexArray.js\";\r\nimport GLTexture from \"./GLTexture.js\";\r\n\r\nexport default class GLObject {\r\n  constructor({\r\n    gl,\r\n    mesh = undefined,\r\n    program = undefined,\r\n    vertexArray = new GLVertexArray({\r\n      gl,\r\n      mesh,\r\n      program,\r\n    }),\r\n  }) {\r\n    this.gl = gl;\r\n    this.mesh = mesh;\r\n    this.program = program;\r\n    this.vertexArray = vertexArray;\r\n\r\n    this._boundTextures = new Set();\r\n  }\r\n\r\n  bind() {\r\n    this.program.use();\r\n    this.vertexArray.bind();\r\n    let unit = 0;\r\n    for (const [name, type] of this.program.uniformTypes) {\r\n      if (type.startsWith(\"sampler\")) {\r\n        const value = this.program.uniforms.get(name);\r\n        if (value instanceof GLTexture) {\r\n          value.bind({\r\n            unit,\r\n          });\r\n          this._boundTextures.add(value);\r\n        }\r\n        unit++;\r\n      }\r\n    }\r\n  }\r\n\r\n  draw(options) {\r\n    options = Object.assign({ bind: true, uniforms: {} }, options);\r\n    if (options.bind) {\r\n      this.bind();\r\n    }\r\n    for (const uniform in options.uniforms) {\r\n      this.program.uniforms.set(uniform, options.uniforms[uniform]);\r\n    }\r\n    this.mesh.draw(options);\r\n    if (options.bind) {\r\n      this.unbind();\r\n    }\r\n  }\r\n\r\n  unbind() {\r\n    this.vertexArray.unbind();\r\n    for (const texture of this._boundTextures) {\r\n      texture.unbind();\r\n    }\r\n  }\r\n}\r\n","export default class CameraShader {\r\n  static get Camera() {\r\n    return `\r\n      struct Camera\r\n      {\r\n        float near;\r\n        float far;\r\n        float fov;\r\n        float aspectRatio;\r\n        mat4 transform;\r\n        mat4 inverseTransform;\r\n        mat4 projection;\r\n        mat4 projectionView;\r\n      };\r\n    `;\r\n  }\r\n}\r\n","export default class RayShader {\r\n  static get Ray() {\r\n    return `\r\n      struct Ray\r\n      {\r\n        vec3 origin;\r\n        vec3 direction;\r\n      };\r\n    `;\r\n  }\r\n\r\n  static rayFromCamera() {\r\n    return `\r\n      Ray rayFromCamera(vec2 position, Camera camera) {\r\n        float fovScaleY = tan(camera.fov * .5);\r\n\r\n        vec3 rayOrigin = -camera.inverseTransform[3].xyz * mat3(camera.inverseTransform);\r\n        vec3 rayDirection = normalize(vec3(position.x * fovScaleY * camera.aspectRatio, position.y * fovScaleY, -1.0) * mat3(camera.inverseTransform));\r\n\r\n        return Ray(rayOrigin, rayDirection);\r\n      }\r\n    `;\r\n  }\r\n}\r\n","export default class SDFShader {\r\n  static get Voxel() {\r\n    return `\r\n      struct Voxel\r\n      {\r\n        vec4 coord;\r\n        vec4 material;\r\n      };\r\n    `;\r\n  }\r\n\r\n  static sdfBox() {\r\n    return `\r\n      Voxel sdfBox(vec3 position, vec3 box, vec4 material) {\r\n        return Voxel(vec4(position, length(max(abs(position) - box, 0.0))), material);\r\n      }\r\n    `;\r\n  }\r\n\r\n  static sdfEllipsoid() {\r\n    return `\r\n      Voxel sdfEllipsoid(vec3 position, vec3 box, vec4 material) {\r\n        return Voxel(vec4(position, (length(position / box) - 1.0) * min(min(box.x, box.y), box.z)), material);\r\n      }\r\n    `;\r\n  }\r\n\r\n  static sdfSphere() {\r\n    return `\r\n      Voxel sdfSphere(vec3 position, float radius, vec4 material) {\r\n        return Voxel(vec4(position, length(position) - radius), material);\r\n      }\r\n    `;\r\n  }\r\n\r\n  static sdfSmoothMin() {\r\n    return `\r\n      Voxel sdfSmoothMin(Voxel voxel1, Voxel voxel2, float blend) {\r\n        float ratio = clamp(.5 + .5 * (voxel2.coord.w - voxel1.coord.w) / blend, 0., 1.);\r\n    \r\n        vec4 coord = mix(voxel2.coord, voxel1.coord, ratio) - blend * ratio * (1. - ratio);\r\n        vec4 material = mix(voxel2.material, voxel1.material, ratio);\r\n    \r\n        return Voxel(coord, material);\r\n      }\r\n    `;\r\n  }\r\n\r\n  static sdfMin() {\r\n    return `\r\n    Voxel sdfMin(Voxel voxel1, Voxel voxel2) {\r\n      if(voxel1.coord.w < voxel2.coord.w) {\r\n        return voxel1;\r\n      }\r\n      else {\r\n        return voxel2;\r\n      }\r\n    }\r\n    `;\r\n  }\r\n\r\n  static sdfTransform() {\r\n    return `\r\n    vec3 sdfTransform(vec3 position, mat4 transform) {\r\n      position = inverse(transform) * position;\r\n      return position;\r\n    }\r\n    `;\r\n  }\r\n\r\n  static sdfSubstraction() {\r\n    return `\r\n      Voxel sdfSubstraction(Voxel voxel1, Voxel voxel2)\r\n      {\r\n        voxel1.coord.w = max(-voxel2.coord.w, voxel1.coord.w);\r\n        voxel1.material = mix(voxel1.material, voxel2.material, step(voxel1.coord.w, -voxel2.coord.w));\r\n        return voxel1;\r\n      }\r\n    `;\r\n  }\r\n\r\n  static sdfRepeat() {\r\n    return `\r\n      float sdfRepeat(float p, float c) {\r\n        return mod(p,c) - 0.5 * c;\r\n      }\r\n\r\n      vec2 sdfRepeat(vec2 p, vec2 c) {\r\n        return mod(p,c) - 0.5 * c;\r\n      }\r\n\r\n      vec3 sdfRepeat(vec3 p, vec3 c) {\r\n        return mod(p,c) - 0.5 * c;\r\n      }\r\n    `;\r\n  }\r\n\r\n  // http://iquilezles.org/www/articles/normalsSDF/normalsSDF.htm\r\n  static sdfNormalFromPosition({\r\n    name = \"sdfNormalFromPosition\",\r\n    mapName = \"map\",\r\n    preventInline = false,\r\n  } = {}) {\r\n    if (preventInline) {\r\n      return `\r\n        vec3 ${name}(vec3 position, float epsilon)\r\n        {\r\n          #define ZERO (min(int(epsilon),0)) // or any other non constant and cheap expression that is guaranteed to evaluate to zero\r\n          vec3 n = vec3(0.0);\r\n          for( int i=ZERO; i<4; i++ )\r\n          {\r\n            vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\r\n            n += e*${mapName}(position+e*epsilon).coord.w;\r\n          }\r\n          return normalize(n);\r\n        }\r\n      `;\r\n    } else {\r\n      return `\r\n        vec3 ${name}(vec3 position, float epsilon)\r\n        {\r\n            const vec2 k = vec2(1,-1);\r\n            return normalize( k.xyy*${mapName}( position + k.xyy*epsilon ).coord.w + \r\n                              k.yyx*${mapName}( position + k.yyx*epsilon ).coord.w + \r\n                              k.yxy*${mapName}( position + k.yxy*epsilon ).coord.w + \r\n                              k.xxx*${mapName}( position + k.xxx*epsilon ).coord.w );\r\n        }\r\n      `;\r\n    }\r\n  }\r\n\r\n  static sdfRayMarch({\r\n    name = \"sdfRayMarch\",\r\n    mapName = \"map\",\r\n    maxSteps = 512,\r\n  } = {}) {\r\n    return `\r\n      Voxel ${name}(Ray ray, float near, float far, int steps, float distancePrecision)\r\n      {\r\n        Voxel voxel;\r\n\r\n        float rayMarchingStep = far;\r\n        float distance = near;\r\n\r\n        // TODO: Remove use of maxsteps and just use step when WebGL2 is broadly supported\r\n        \r\n        for(int i = 0; i < ${maxSteps}; i++) {\r\n          if (i == steps || rayMarchingStep < distancePrecision || distance > far) break;\r\n          voxel = ${mapName}(ray.origin + ray.direction * distance);\r\n          rayMarchingStep = voxel.coord.w;\r\n          distance += rayMarchingStep;\r\n        }\r\n\r\n        voxel.coord.xyz = ray.origin + ray.direction * distance;\r\n        voxel.coord.w = distance;\r\n        voxel = sdfMin(voxel, Voxel(vec4(0., 0., 0., far), vec4(0.)));\r\n\r\n        return voxel;\r\n      }\r\n    `;\r\n  }\r\n}\r\n\r\n// Voxel rayMarchTerrain(vec3 rayOrigin, vec3 rayDirection)\r\n// {\r\n//   Voxel voxel = Voxel(uCamera.far, vec4(0.0));\r\n//\r\n//   float lastHeight = 0.;\r\n//   float lastY = 0.;\r\n//\r\n//   float distance = 0.;\r\n//\r\n//   float steps = 200.;\r\n//   float step = pow(steps, 1./steps);\r\n//   // const float step = 1.0789723114;\r\n//\r\n//   float distanceToPlane = -dot(rayOrigin, vec3(0., 1., 0.)) / dot(rayDirection, vec3(0., 1., 0.));\r\n//\r\n//\r\n//   for(float i = 0.; i < 200.; i++) {\r\n//     distance = distanceToPlane - steps + i;\r\n//     // distance = pow(step, i);\r\n//     vec3 p = rayOrigin + rayDirection * distance;\r\n//     float height = height(p);\r\n//\r\n//     if(p.y < height) {\r\n//         // interpolate the intersection distanceance\r\n//         // resT = t - dt + dt * (lastHeight - lastY) / (p.y - lastY - h + lastHeight);\r\n//         voxel.material = vec4(vec3(p.y / scale), 1.0);\r\n//         break;\r\n//     }\r\n//\r\n//     // step = 0.01 * distance;\r\n//     lastHeight = height;\r\n//     lastY = p.y;\r\n//\r\n//     // rayMarchingStep = voxel.coord.w;\r\n//     // distance += rayMarchingStep;\r\n//     // voxel.coord.w = distance;\r\n//   }\r\n//\r\n//   // vec3 normal = calcNormal(rayOrigin + rayDirection * distance);\r\n//   // voxel.material *= 1. + dot(normal, normalize(vec3(cos(uTime * 100.), cos(uTime * 100.), sin(uTime * 100.))));\r\n//\r\n//   return voxel;\r\n// }\r\n","import BoxMesh from \"../../3d/mesh/BoxMesh.js\";\r\nimport GLObject from \"../GLObject.js\";\r\nimport GLMesh from \"../GLMesh.js\";\r\nimport GLProgram from \"../GLProgram.js\";\r\nimport CameraShader from \"../../shader/CameraShader.js\";\r\nimport RayShader from \"../../shader/RayShader.js\";\r\nimport SDFShader from \"../../shader/SDFShader.js\";\r\n\r\nexport default class GLRayMarchingObject extends GLObject {\r\n  constructor({\r\n    gl,\r\n    sdfObjects = [],\r\n    shaders = [],\r\n    meshDefinition = 10,\r\n    sdfRayMarchSteps = 64,\r\n    sdfRayMarchPrecision = 0.001,\r\n    vertexCompute = false,\r\n  } = { gl }) {\r\n    const instanceIDs = new Float32Array(sdfObjects.length);\r\n    for (let index = 0; index < instanceIDs.length; index++) {\r\n      instanceIDs[index] = index;\r\n    }\r\n\r\n    let mapChunk = `\r\n      SDFObject sdfObject;\r\n      vec3 objectPosition;\r\n    `;\r\n    for (const [i, sdfObject] of sdfObjects.entries()) {\r\n      sdfObject.shape = sdfObject.shape === undefined ? \"sphere\" : sdfObject.shape;\r\n      sdfObject.size = sdfObject.size === undefined ? 1 : sdfObject.size;\r\n      sdfObject.blend = sdfObject.blend === undefined ? 0 : sdfObject.blend;\r\n      sdfObject.material = sdfObject.material === undefined ? [1, 1, 1, 1] : sdfObject.material;\r\n      sdfObject.spherical = sdfObject.spherical === undefined ? sdfObject.shape === \"sphere\" ? 1 : 0 : sdfObject.spherical;\r\n      mapChunk += `\r\n        sdfObject = sdfObjects[${i}];\r\n        objectPosition = position - sdfObject.position;\r\n      `;\r\n      switch (sdfObject.shape) {\r\n        case \"sphere\":\r\n          mapChunk += `\r\n            voxel = sdfSmoothMin(voxel, sdfSphere(objectPosition, sdfObject.size * .5, sdfObject.material), sdfObject.blend * sdfObject.size);\r\n          `;\r\n          break;\r\n        case \"box\":\r\n          mapChunk += `\r\n            voxel = sdfSmoothMin(voxel, sdfBox(objectPosition, vec3(sdfObject.size * .5), sdfObject.material), sdfObject.blend * sdfObject.size);\r\n          `;\r\n          break;\r\n        default:\r\n          mapChunk += `\r\n            voxel = sdfSmoothMin(voxel, ${sdfObject.shape}, sdfObject.blend * sdfObject.size);\r\n          `;\r\n          break;\r\n      }\r\n    }\r\n\r\n    const rayMarchingChunks = new Map([\r\n      [\"start\", `\r\n        ${CameraShader.Camera}\r\n        ${RayShader.Ray}\r\n        ${SDFShader.Voxel}\r\n        \r\n        struct SDFObject\r\n        {\r\n          float spherical;\r\n          float size;\r\n          float blend;\r\n          vec3 position;\r\n          vec4 material;\r\n        };\r\n        \r\n        uniform Camera camera;\r\n        uniform SDFObject sdfObjects[${sdfObjects.length}];\r\n        \r\n        ${RayShader.rayFromCamera()}\r\n      `],\r\n      [\"compute\", `\r\n        uniform int sdfRayMarchSteps;\r\n        uniform float sdfRayMarchPrecision;\r\n\r\n        ${SDFShader.sdfSphere()}\r\n        ${SDFShader.sdfBox()}\r\n        ${SDFShader.sdfMin()}\r\n        ${SDFShader.sdfSmoothMin()}\r\n\r\n        Voxel map(vec3 position) {\r\n          Voxel voxel = Voxel(vec4(0., 0., 0., camera.far), vec4(0.));\r\n          ${mapChunk}\r\n          return voxel;\r\n        }\r\n\r\n        ${SDFShader.sdfRayMarch()}\r\n        ${SDFShader.sdfNormalFromPosition({ preventInline: !(gl instanceof window.WebGLRenderingContext) })}\r\n      `],\r\n      [\"main\", `\r\n        voxel = sdfRayMarch(ray, camera.near, camera.far, sdfRayMarchSteps, sdfRayMarchPrecision);\r\n        \r\n        normal = sdfNormalFromPosition(ray.origin + ray.direction * voxel.coord.w, .1);\r\n        normal = mix(normal, vec3(0.), step(camera.far, voxel.coord.w));\r\n      `],\r\n    ]);\r\n\r\n    super({\r\n      gl,\r\n      mesh: new GLMesh(Object.assign({\r\n        gl,\r\n        attributes: [\r\n          [\"instanceID\", {\r\n            data: instanceIDs,\r\n            size: 1,\r\n            divisor: 1,\r\n          }],\r\n        ],\r\n      }, new BoxMesh({\r\n        width: 1,\r\n        height: 1,\r\n        depth: 1,\r\n        widthSegments: meshDefinition,\r\n        heightSegments: meshDefinition,\r\n        depthSegments: meshDefinition,\r\n        normals: false,\r\n        uvs: false,\r\n      }))),\r\n      program: new GLProgram({\r\n        gl,\r\n        uniforms: [\r\n          [\"sdfRayMarchSteps\", sdfRayMarchSteps],\r\n          [\"sdfRayMarchPrecision\", sdfRayMarchPrecision]\r\n        ],\r\n        vertexShaderChunks: [\r\n          [\"start\", `\r\n            in float instanceID;\r\n            in vec3 position;\r\n\r\n            ${rayMarchingChunks.get(\"start\")}\r\n\r\n            ${vertexCompute ? rayMarchingChunks.get(\"compute\") : \"\"}\r\n            \r\n            out vec3 normal;\r\n            out Ray ray;\r\n            ${vertexCompute ? \"out Voxel voxel;\" : \"\"}\r\n          `],\r\n          [\"end\", `\r\n            SDFObject sdfObject = sdfObjects[int(instanceID)];\r\n\r\n            vec3 position = position;\r\n            position = mix(position, normalize(position) * .5, sdfObject.spherical);\r\n            position *= sdfObject.size + sdfObject.blend * sdfObject.size;\r\n            position += sdfObject.position;\r\n            gl_Position = camera.projectionView * vec4(position, 1.);\r\n\r\n            ray = rayFromCamera(gl_Position.xy / gl_Position.w, camera);\r\n\r\n            ${vertexCompute ? rayMarchingChunks.get(\"main\") : \"\"}\r\n          `],\r\n        ],\r\n        fragmentShaderChunks: [\r\n          [\"start\", `\r\n            ${rayMarchingChunks.get(\"start\")}\r\n            \r\n            ${!vertexCompute ? rayMarchingChunks.get(\"compute\") : \"\"}\r\n\r\n            in Ray ray;\r\n            in vec3 normal;\r\n            ${vertexCompute ? \"in Voxel voxel;\" : \"\"}\r\n          `],\r\n          [\"end\", `\r\n            ${!vertexCompute ? \"Voxel voxel = Voxel(vec4(0.), vec4(0.));\\nvec3 normal = normal;\\n\" + rayMarchingChunks.get(\"main\") : \"\"}\r\n\r\n            fragColor = voxel.material;\r\n          `],\r\n        ],\r\n        shaders,\r\n      }),\r\n    });\r\n\r\n    this.sdfObjects = sdfObjects;\r\n  }\r\n\r\n  draw(options) {\r\n    super.draw(Object.assign({ instanceCount: this.sdfObjects.length }, options));\r\n  }\r\n}\r\n","import Vector2 from \"../math/Vector2.js\";\r\nimport Signal from \"../util/Signal.js\";\r\nimport Ticker from \"../util/Ticker.js\";\r\n\r\nconst pointers = new Map();\r\n\r\nexport default class Pointer extends Vector2 {\r\n  static get TOUCH_TYPE() {\r\n    return \"touchtype\";\r\n  }\r\n\r\n  static get MOUSE_TYPE() {\r\n    return \"mousetype\";\r\n  }\r\n\r\n  static get(domElement = window) {\r\n    let pointer = pointers.get(domElement);\r\n    if (!pointer) {\r\n      pointer = new Pointer(domElement);\r\n    }\r\n    return pointer;\r\n  }\r\n\r\n  get downed() {\r\n    return this._downed;\r\n  }\r\n\r\n  constructor(domElement) {\r\n    super();\r\n\r\n    this._domElement = domElement || window;\r\n\r\n    this.type = Pointer.TOUCH_TYPE;\r\n\r\n    this.velocity = new Vector2();\r\n    this.dragOffset = new Vector2();\r\n\r\n    this.centered = new Vector2();\r\n    this.centeredFlippedY = new Vector2();\r\n    this.normalized = new Vector2();\r\n    this.normalizedFlippedY = new Vector2();\r\n    this.normalizedCentered = new Vector2();\r\n    this.normalizedCenteredFlippedY = new Vector2();\r\n\r\n    this._downed = false;\r\n\r\n    pointers.set(this._domElement, this);\r\n\r\n    this.onDown = new Signal();\r\n    this.onMove = new Signal();\r\n    this.onUp = new Signal();\r\n    this.onClick = new Signal();\r\n    this.onTypeChange = new Signal();\r\n\r\n    this._preventMouseTypeChange = false;\r\n\r\n    this._onPointerMoveBinded = this._onPointerMove.bind(this);\r\n    this._onPointerDownBinded = this._onPointerDown.bind(this);\r\n    this._onPointerUpBinded = this._onPointerUp.bind(this);\r\n\r\n    this._updateBinded = this._update.bind(this);\r\n    this._resizeBinded = this.resize.bind(this);\r\n\r\n    this._position = new Vector2();\r\n\r\n    this.enable();\r\n  }\r\n\r\n  resize() {\r\n    this._domElementBoundingRect = this._domElement === window ? {\r\n      left: 0,\r\n      top: 0,\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n    } : this._domElement.getBoundingClientRect();\r\n  }\r\n\r\n  _onPointerDown(e) {\r\n    this.resize();\r\n    if (e.type === \"touchstart\") {\r\n      this._preventMouseTypeChange = true;\r\n      this._changeType(Pointer.TOUCH_TYPE);\r\n    }\r\n    this._downed = true;\r\n    this.dragOffset.set(0, 0);\r\n    this.copy(this._position);\r\n    this._onPointerEvent(e);\r\n    this._updatePositions();\r\n    this.onDown.dispatch(e);\r\n  }\r\n\r\n  _onPointerMove(e) {\r\n    if (e.type === \"mousemove\") {\r\n      if (this._preventMouseTypeChange) {\r\n        return;\r\n      } else {\r\n        this._changeType(Pointer.MOUSE_TYPE);\r\n      }\r\n    }\r\n    this._onPointerEvent(e);\r\n    this.onMove.dispatch(e);\r\n  }\r\n\r\n  _onPointerUp(e) {\r\n    if (!this._downed) {\r\n      return;\r\n    }\r\n    this._downed = false;\r\n    this._onPointerEvent(e);\r\n    this._updatePositions();\r\n    this.onUp.dispatch(e);\r\n    if (this.dragOffset.size < 4) {\r\n      this.onClick.dispatch(e);\r\n    }\r\n    clearTimeout(this._timeout);\r\n    this._timeout = setTimeout(() => {\r\n      this._preventMouseTypeChange = false;\r\n    }, 2000);\r\n  }\r\n\r\n  _onPointerEvent(e) {\r\n    if (!!window.TouchEvent && e instanceof window.TouchEvent) {\r\n      if (e.type === \"touchend\") {\r\n        e = e.changedTouches[0];\r\n      } else {\r\n        e = e.touches[0];\r\n      }\r\n    }\r\n    this._position.x = e.clientX - this._domElementBoundingRect.left;\r\n    this._position.y = e.clientY - this._domElementBoundingRect.top;\r\n  }\r\n\r\n  _changeType(type) {\r\n    if (this.type === type) {\r\n      return;\r\n    }\r\n    this.type = type;\r\n    this.disable();\r\n    this.enable();\r\n    this.onTypeChange.dispatch(this.type);\r\n  }\r\n\r\n  _update() {\r\n    if (this.x || this.y) {\r\n      this.velocity.x = this._position.x - this.x;\r\n      this.velocity.y = this._position.y - this.y;\r\n      if (this.downed) {\r\n        this.dragOffset.add(this.velocity);\r\n      }\r\n    }\r\n\r\n    this._updatePositions();\r\n  }\r\n\r\n  _updatePositions() {\r\n    this.x = this._position.x;\r\n    this.y = this._position.y;\r\n\r\n    if (!this.x && !this.y) {\r\n      return;\r\n    }\r\n\r\n    this.centered.x = this.centeredFlippedY.x = this.x - this._domElementBoundingRect.width * .5;\r\n    this.centered.y = this.centeredFlippedY.y = this.y - this._domElementBoundingRect.height * .5;\r\n    this.centeredFlippedY.y *= -1;\r\n\r\n    this.normalized.x = this.normalizedFlippedY.x = this.x / this._domElementBoundingRect.width;\r\n    this.normalized.y = this.normalizedFlippedY.y = this.y / this._domElementBoundingRect.height;\r\n    this.normalizedFlippedY.y = 1 - this.normalizedFlippedY.y;\r\n\r\n    this.normalizedCentered.x = this.normalizedCenteredFlippedY.x = this.normalized.x * 2 - 1;\r\n    this.normalizedCentered.y = this.normalizedCenteredFlippedY.y = this.normalized.y * 2 - 1;\r\n    this.normalizedCenteredFlippedY.y *= -1;\r\n  }\r\n\r\n  enable() {\r\n    this.disable();\r\n    this.resize();\r\n    if (this.type === Pointer.TOUCH_TYPE) {\r\n      this._domElement.addEventListener(\"touchmove\", this._onPointerMoveBinded);\r\n      window.addEventListener(\"touchend\", this._onPointerUpBinded);\r\n    } else {\r\n      this._domElement.addEventListener(\"mousedown\", this._onPointerDownBinded);\r\n      window.addEventListener(\"mouseup\", this._onPointerUpBinded);\r\n    }\r\n    this._domElement.addEventListener(\"touchstart\", this._onPointerDownBinded);\r\n    this._domElement.addEventListener(\"mousemove\", this._onPointerMoveBinded);\r\n    window.addEventListener(\"resize\", this._resizeBinded);\r\n    Ticker.add(this._updateBinded = this._updateBinded || this._update.bind(this));\r\n  }\r\n\r\n  disable() {\r\n    Ticker.delete(this._updateBinded);\r\n    this._domElement.removeEventListener(\"touchstart\", this._onPointerDownBinded);\r\n    this._domElement.removeEventListener(\"mousedown\", this._onPointerDownBinded);\r\n    this._domElement.removeEventListener(\"touchmove\", this._onPointerMoveBinded);\r\n    this._domElement.removeEventListener(\"mousemove\", this._onPointerMoveBinded);\r\n    window.removeEventListener(\"touchend\", this._onPointerUpBinded);\r\n    window.removeEventListener(\"mouseup\", this._onPointerUpBinded);\r\n    window.removeEventListener(\"resize\", this._resizeBinded);\r\n  }\r\n}\r\n","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as quat from \"../../gl-matrix/esm/quat.js\";\r\n\r\nexport default class Quaternion extends Float32Array {\r\n  constructor(x = 0, y = 0, z = 0, w = 1) {\r\n    super(4);\r\n    this.set(x, y, z, w);\r\n    return this;\r\n  }\r\n\r\n  get x() {\r\n    return this[0];\r\n  }\r\n\r\n  set x(value) {\r\n    this[0] = value;\r\n  }\r\n\r\n  get y() {\r\n    return this[1];\r\n  }\r\n\r\n  set y(value) {\r\n    this[1] = value;\r\n  }\r\n\r\n  get z() {\r\n    return this[2];\r\n  }\r\n\r\n  set z(value) {\r\n    this[2] = value;\r\n  }\r\n\r\n  get w() {\r\n    return this[3];\r\n  }\r\n\r\n  set w(value) {\r\n    this[3] = value;\r\n  }\r\n\r\n  identity() {\r\n    quat.identity(this);\r\n    return this;\r\n  }\r\n\r\n  set(x, y, z, w) {\r\n    quat.set(this, x, y, z, w);\r\n    return this;\r\n  }\r\n\r\n  rotateX(angle) {\r\n    quat.rotateX(this, this, angle);\r\n    return this;\r\n  }\r\n\r\n  rotateY(angle) {\r\n    quat.rotateY(this, this, angle);\r\n    return this;\r\n  }\r\n\r\n  rotateZ(angle) {\r\n    quat.rotateZ(this, this, angle);\r\n    return this;\r\n  }\r\n\r\n  invert(quaternion = this) {\r\n    quat.invert(this, quaternion);\r\n    return this;\r\n  }\r\n\r\n  copy(quaternion) {\r\n    quat.copy(this, quaternion);\r\n    return this;\r\n  }\r\n\r\n  normalize(quaternion = this) {\r\n    quat.normalize(this, this);\r\n    return this;\r\n  }\r\n\r\n  multiply(quaternionA, quaternionB) {\r\n    if (quaternionB) {\r\n      quat.multiply(this, quaternionA, quaternionB);\r\n    } else {\r\n      quat.multiply(this, this, quaternionA);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  fromMatrix3(matrix3) {\r\n    quat.fromMat3(this, matrix3);\r\n    return this;\r\n  }\r\n}\r\n","import Pointer from \"../../input/Pointer.js\";\r\nimport Matrix4 from \"../../math/Matrix4.js\";\r\nimport Vector2 from \"../../math/Vector2.js\";\r\nimport Vector3 from \"../../math/Vector3.js\";\r\nimport Quaternion from \"../../math/Quaternion.js\";\r\n\r\nexport default class TrackballController {\r\n  constructor({\r\n    matrix = new Matrix4(), \r\n    domElement = document.body,\r\n    distance = 0,\r\n    invertRotation = true,\r\n    rotationEaseRatio = .04,\r\n    zoomSpeed = .1,\r\n    zoomEaseRatio = .1,\r\n    minDistance = 0,\r\n    maxDistance = Infinity,\r\n    enabled = true\r\n  } = {}) {\r\n    this.matrix = matrix;\r\n\r\n    this._distance = distance;\r\n    this.invertRotation = invertRotation;\r\n    this.rotationEaseRatio = rotationEaseRatio;\r\n    this.maxDistance = maxDistance;\r\n    this.minDistance = minDistance;\r\n    this.zoomSpeed = zoomSpeed;\r\n    this.zoomEaseRatio = zoomEaseRatio;\r\n    \r\n    this._pointer = Pointer.get(domElement);\r\n    this._nextDistance = this._distance;\r\n    \r\n    this._cachedQuaternion = new Quaternion();\r\n    this._cachedMatrix = new Matrix4();\r\n    this._cachedVector3 = new Vector3();\r\n    \r\n    this._velocity = new Vector2();\r\n    this._velocityOrigin = new Vector2();\r\n    \r\n    this._position = new Vector3([this.matrix.x, this.matrix.y, this.matrix.z]);\r\n    this._positionPrevious = this._position.clone();\r\n    this._positionOffset = new Vector3();\r\n    \r\n    domElement.addEventListener(\"wheel\", this.onWheel.bind(this));\r\n    \r\n    this.enabled = true;\r\n    this.update();\r\n    this.enabled = enabled;\r\n  }\r\n\r\n  set distance(value) {\r\n    this._distance = this._nextDistance = value;\r\n  }\r\n\r\n  get distance() {\r\n    return this._distance;\r\n  }\r\n\r\n  onWheel(e) {\r\n    if(!this.enabled) {\r\n      return;\r\n    }\r\n    const scrollOffsetRatio = 1 + Math.abs(e.deltaY * this.zoomSpeed * .01);\r\n    this._nextDistance = this._nextDistance || 1;\r\n    this._nextDistance = e.deltaY > 0 ? this._nextDistance * scrollOffsetRatio : this._nextDistance / scrollOffsetRatio;\r\n    this._nextDistance = Math.max(Math.min(this._nextDistance, this.maxDistance), this.minDistance);\r\n  }\r\n\r\n  update() {\r\n    if(!this.enabled) {\r\n      return;\r\n    }\r\n\r\n    this._cachedMatrix.identity();\r\n    this._cachedQuaternion.identity();\r\n\r\n    this._distance += (this._nextDistance - this._distance) * this.zoomEaseRatio;\r\n\r\n    this._position.set(this.matrix.x, this.matrix.y, this.matrix.z).subtract(this._positionOffset);\r\n\r\n    this.matrix.x = 0;\r\n    this.matrix.y = 0;\r\n    this.matrix.z = 0;\r\n\r\n    if(this._pointer.downed) {\r\n      this._velocity.copy(this._pointer.velocity).scale(.003);\r\n    }\r\n\r\n    this._velocity.lerp(this._velocityOrigin, this.rotationEaseRatio);\r\n\r\n    this._cachedQuaternion.rotateY(this.invertRotation ? -this._velocity.x : this._velocity.x);\r\n    this._cachedQuaternion.rotateX(this.invertRotation ? -this._velocity.y : this._velocity.y);\r\n\r\n    this._cachedMatrix.fromQuaternion(this._cachedQuaternion);\r\n\r\n    this.matrix.multiply(this._cachedMatrix);\r\n\r\n    this._positionOffset.set(0, 0, 1);\r\n    this._positionOffset.applyMatrix4(this.matrix);\r\n    this._positionOffset.scale(this._distance);\r\n\r\n    this._cachedVector3.copy(this._position).add(this._positionOffset);\r\n\r\n    this.matrix.x = this._cachedVector3.x;\r\n    this.matrix.y = this._cachedVector3.y;\r\n    this.matrix.z = this._cachedVector3.z;\r\n  }\r\n}\r\n","import Camera from \"../../node_modules/dlib/3d/Camera.js\";\r\nimport GLRayMarchingObject from \"../../node_modules/dlib/gl/objects/GLRayMarchingObject.js\";\r\nimport TrackballController from \"../../node_modules/dlib/3d/controllers/TrackballController.js\";\r\nimport Vector3 from \"../../node_modules/dlib/math/Vector3.js\";\r\n\r\nexport default class View {\r\n  constructor({\r\n    canvas = undefined,\r\n  } = {}) {\r\n    this.canvas = canvas;\r\n\r\n    const webGLOptions = {\r\n      depth: true,\r\n      alpha: false,\r\n      antialias: true,\r\n    };\r\n\r\n    if (!/\\bforcewebgl1\\b/.test(window.location.search)) {\r\n      this.gl = this.canvas.getContext(\"webgl2\", webGLOptions);\r\n    }\r\n    if (!this.gl) {\r\n      this.gl = this.canvas.getContext(\"webgl\", webGLOptions) || this.canvas.getContext(\"experimental-webgl\", webGLOptions);\r\n    }\r\n\r\n    this.camera = new Camera();\r\n\r\n    this.cameraController = new TrackballController({\r\n      matrix: this.camera.transform,\r\n      distance: 5,\r\n    });\r\n\r\n    this.gl.clearColor(0, 0, 0, 1);\r\n    this.gl.enable(this.gl.CULL_FACE);\r\n    this.gl.enable(this.gl.DEPTH_TEST);\r\n\r\n    const sdfObjects = [];\r\n    for (let index = 0; index < 40; index++) {\r\n      sdfObjects.push({\r\n        _speed: .05 + Math.random() * .05,\r\n        shape: \"sphere\",\r\n        blend: 1,\r\n        material: [\r\n          Math.random(),\r\n          Math.random(),\r\n          Math.random(),\r\n          1,\r\n        ],\r\n        position: new Vector3([\r\n          (Math.random() * 2 - 1) * 5,\r\n          Math.random() * 2 - 1,\r\n          Math.random() * 2 - 1,\r\n        ]),\r\n      });\r\n    }\r\n    this.object = new GLRayMarchingObject({\r\n      gl: this.gl,\r\n      sdfObjects,\r\n      shaders: [\r\n        {\r\n          fragmentShaderChunks: [\r\n            [\"end\", `\r\n              float lightRatio = max(0., dot(normal, normalize(vec3(1., 1., -1.))));\r\n              vec3 color = voxel.material.rgb;\r\n              color += lightRatio;\r\n              fragColor = vec4(color, voxel.material.a);\r\n            `],\r\n          ],\r\n        },\r\n      ],\r\n    });\r\n  }\r\n\r\n  resize(width, height) {\r\n    this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\r\n    this.camera.aspectRatio = width / height;\r\n    this.update();\r\n  }\r\n\r\n  update() {\r\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\r\n\r\n    this.cameraController.update();\r\n\r\n    for (const sdfObject of this.object.sdfObjects) {\r\n      sdfObject.position.x += sdfObject._speed;\r\n      sdfObject.size = 1 - Math.abs(Math.min(10, (sdfObject.position.x + 5)) / 10 * 2 - 1);\r\n      if (sdfObject.position.x > 5) {\r\n        sdfObject.position.x = -5;\r\n        sdfObject.position.y = Math.random() * 2 - 1;\r\n        sdfObject.position.z = Math.random() * 2 - 1;\r\n        sdfObject._speed = Math.random() * .05 + .05;\r\n      }\r\n    }\r\n\r\n    this.object.draw({\r\n      // mode: this.gl.LINES,\r\n      uniforms: {\r\n        sdfObjects: this.object.sdfObjects,\r\n        camera: this.camera,\r\n      },\r\n    });\r\n  }\r\n}\r\n","import TickerElement from \"../../node_modules/dlmn/util/TickerElement.js\";\r\n\r\nimport View from \"./View.js\";\r\n\r\nwindow.customElements.define(\"xp-smoke\", class extends TickerElement {\r\n  constructor() {\r\n    super({ autoplay: true });\r\n\r\n    this._resizeBinded = this.resize.bind(this);\r\n\r\n    this.attachShadow({ mode: \"open\" }).innerHTML = `\r\n      <style>\r\n        :host {\r\n          display: block;\r\n        }\r\n        \r\n        canvas {\r\n          width: 100%;\r\n          height: 100%;\r\n        }\r\n      </style>\r\n      <canvas></canvas>\r\n    `;\r\n\r\n    this.canvas = this.shadowRoot.querySelector(\"canvas\");\r\n\r\n    this.view = new View({ canvas: this.canvas });\r\n  }\r\n\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n    window.addEventListener(\"resize\", this._resizeBinded);\r\n    this.resize();\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    super.disconnectedCallback();\r\n    window.removeEventListener(\"resize\", this._resizeBinded);\r\n  }\r\n\r\n  resize() {\r\n    const width = this.canvas.offsetWidth;\r\n    const height = this.canvas.offsetHeight;\r\n\r\n    this.canvas.width = width * window.devicePixelRatio;\r\n    this.canvas.height = height * window.devicePixelRatio;\r\n\r\n    // this.canvas.width = width;\r\n    // this.canvas.height = height;\r\n\r\n    this.view.resize(width, height);\r\n  }\r\n\r\n  update() {\r\n    this.view.update();\r\n  }\r\n});\r\n"],"names":["Ticker","mat4.set","mat4.translate","mat4.rotateX","mat4.rotateY","mat4.rotateZ","mat4.scale","mat4.multiply","mat4.identity","mat4.copy","mat4.perspective","mat4.fromQuat","mat4.invert","glMatrix.ARRAY_TYPE","copy","set","scale","vec2.distance","vec2.set","vec2.copy","vec2.add","vec2.length","vec2.squaredLength","vec2.subtract","vec2.negate","vec2.cross","vec2.scale","vec2.normalize","vec2.dot","vec2.exactEquals","vec2.transformMat3","vec2.transformMat4","vec2.lerp","create","length","add","subtract","distance","squaredLength","negate","normalize","dot","cross","transformMat4","exactEquals","forEach","vec3.set","vec3.copy","vec3.add","vec3.length","vec3.squaredLength","vec3.distance","vec3.squaredDistance","vec3.subtract","vec3.negate","vec3.cross","vec3.scale","vec3.normalize","vec3.dot","vec3.exactEquals","vec3.transformMat4","vec3.angle","vec4.set","identity","invert","multiply","translate","fromQuat","mat3.set","mat3.translate","mat3.rotate","mat3.scale","mat3.multiply","mat3.identity","mat3.copy","mat3.fromMat4","mat3.fromQuat","mat3.invert","rotateX","rotateY","rotateZ","glMatrix.EPSILON","vec4.copy","vec4.normalize","vec3.create","vec3.fromValues","vec3.len","mat3.create","quat.identity","quat.set","quat.rotateX","quat.rotateY","quat.rotateZ","quat.invert","quat.copy","quat.normalize","quat.multiply","quat.fromMat3"],"mappings":"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AAC,CAAC,CAAC,CAAC,CAAC;EACV,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACV,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACV,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACnD,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACnD,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACnD,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACnD,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACV,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACV,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACX,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACnD,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACnD,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACpD,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACpD,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACX,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACX,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACX,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACX,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACpD,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACpD,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACpD,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACpD,OAAO,GAAG,CAAC;CACZ;;;;;;;;;;AAUD,AAAO,SAAS,SAAS,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;EACnC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACR,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACR,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EACvB,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EACvB,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;;EAEvB,IAAI,CAAC,KAAK,GAAG,EAAE;IACb,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IACjD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IACjD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IAClD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;GACnb,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IACb,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IACb,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IACb,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IACb,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IACb,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IACb,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IACb,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IACb,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IACb,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC;IACd,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC;IACd,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IAC9C,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IAC9C,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IAC9C,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;GAC/C;;EAED,OAAO,GAAG,CAAC;CACZ;;;;;;;;;;AAUD,AAAO,SAAS,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;EAC/B,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACR,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACR,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAClB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAClB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAClB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAClB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAClB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAClB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAClB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAClB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAClB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAClB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;EACpB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;EACpB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EAChB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EAChB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EAChB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EAChB,OAAO,GAAG,CAAC;CACZ;AACD,AAgFA;;;;;;;;;AASA,AAAO,SAAS,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE;EACnC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACtB,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACtB,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EAChB,IAAI,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;;EAEhB,IAAI,CAAC,KAAK,GAAG,EAAE;;IAEb,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACd,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IAChB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IAChB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IAChB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;GACjB;;;EAGD,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;EAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;EAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;EAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;EAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;EAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;EAC3B,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;EAC5B,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;EAC5B,OAAO,GAAG,CAAC;CACZ;;;;;;;;;;AAUD,AAAO,SAAS,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE;EACnC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACtB,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACtB,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EAChB,IAAI,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;;EAEhB,IAAI,CAAC,KAAK,GAAG,EAAE;;IAEb,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACd,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IAChB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IAChB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IAChB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;GACjB;;;EAGD,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;EAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;EAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;EAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;EAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;EAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;EAC3B,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;EAC5B,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;EAC5B,OAAO,GAAG,CAAC;CACZ;;;;;;;;;;AAUD,AAAO,SAAS,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE;EACnC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACtB,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACtB,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEf,IAAI,CAAC,KAAK,GAAG,EAAE;;IAEb,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACd,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IAChB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IAChB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IAChB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IAChB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IAChB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;GACjB;;;EAGD,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;EAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;EAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;EAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;EAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;EAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;EAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;EAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;EAC3B,OAAO,GAAG,CAAC;CACZ;AACD,AAigBA;;;;;;;;;AASA,AAAO,SAAS,QAAQ,CAAC,GAAG,EAAE,CAAC,EAAE;EAC/B,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACR,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACR,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACR,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;EACf,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;EACf,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;EACf,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;EAChB,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;EAChB,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;EAChB,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;EAChB,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;EAChB,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;EAChB,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;EAChB,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;EAChB,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;EAChB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;EACrB,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;EACjB,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;EACjB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;EACjB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;EACrB,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;EACjB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;EACjB,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;EACjB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;EACtB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;EACZ,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;EACZ,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;EACZ,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;EACZ,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;EACZ,OAAO,GAAG,CAAC;CACZ;AACD,AAmCA;;;;;;;;;;;;AAYA,AAAO,SAAS,WAAW,CAAC,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE;EACxD,IAAI,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC;MAC5B,EAAE,CAAC;EACP,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;EACpB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;EACb,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;EACZ,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;EACZ,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;;EAEZ,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,KAAK,QAAQ,EAAE;IACnC,EAAE,GAAG,CAAC,IAAI,IAAI,GAAG,GAAG,CAAC,CAAC;IACtB,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;IAC5B,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;GAC/B,MAAM;IACL,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IACb,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;GACrB;;EAED,OAAO,GAAG,CAAC;CACZ;;ACx2Cc,MAAM,OAAO,SAAS,YAAY,CAAC;EAChD,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;IACpE,KAAK,CAAC,KAAK,CAAC,CAAC;IACb,OAAO,IAAI,CAAC;GACb;;EAED,IAAI,CAAC,CAAC,KAAK,EAAE;IACX,IAAI,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;GAClB;;EAED,IAAI,CAAC,GAAG;IACN,OAAO,IAAI,CAAC,EAAE,CAAC,CAAC;GACjB;;EAED,IAAI,CAAC,CAAC,KAAK,EAAE;IACX,IAAI,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;GAClB;;EAED,IAAI,CAAC,GAAG;IACN,OAAO,IAAI,CAAC,EAAE,CAAC,CAAC;GACjB;;EAED,IAAI,CAAC,CAAC,KAAK,EAAE;IACX,IAAI,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;GAClB;;EAED,IAAI,CAAC,GAAG;IACN,OAAO,IAAI,CAAC,EAAE,CAAC,CAAC;GACjB;;EAED,IAAI,CAAC,CAAC,KAAK,EAAE;IACX,IAAI,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;GAClB;;EAED,IAAI,CAAC,GAAG;IACN,OAAO,IAAI,CAAC,EAAE,CAAC,CAAC;GACjB;;EAED,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAClF,IAAI,GAAG,CAAC,MAAM,EAAE;MACd,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACvB;IACDC,GAAQ,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC/F,OAAO,IAAI,CAAC;GACb;;EAED,SAAS,CAAC,OAAO,EAAE,OAAO,GAAG,IAAI,EAAE;IACjCC,SAAc,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IACvC,OAAO,IAAI,CAAC;GACb;;EAED,OAAO,CAAC,KAAK,EAAE,OAAO,GAAG,IAAI,EAAE;IAC7BC,OAAY,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IACnC,OAAO,IAAI,CAAC;GACb;;EAED,OAAO,CAAC,KAAK,EAAE,OAAO,GAAG,IAAI,EAAE;IAC7BC,OAAY,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IACnC,OAAO,IAAI,CAAC;GACb;;EAED,OAAO,CAAC,KAAK,EAAE,OAAO,GAAG,IAAI,EAAE;IAC7BC,OAAY,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IACnC,OAAO,IAAI,CAAC;GACb;;EAED,KAAK,CAAC,KAAK,EAAE,OAAO,GAAG,IAAI,EAAE;IAC3BC,KAAU,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,KAAK,KAAK,QAAQ,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC;IACrF,OAAO,IAAI,CAAC;GACb;;EAED,QAAQ,CAAC,QAAQ,EAAE,QAAQ,EAAE;IAC3B,IAAI,QAAQ,EAAE;MACZC,QAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;KACzC,MAAM;MACLA,QAAa,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;KACrC;IACD,OAAO,IAAI,CAAC;GACb;;EAED,QAAQ,GAAG;IACTC,QAAa,CAAC,IAAI,CAAC,CAAC;IACpB,OAAO,IAAI,CAAC;GACb;;EAED,IAAI,CAAC,OAAO,EAAE;IACZC,IAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACzB,OAAO,IAAI,CAAC;GACb;;EAED,eAAe,CAAC,EAAE,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE;IAC/CC,WAAgB,CAAC,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;IACpD,OAAO,IAAI,CAAC;GACb;;EAED,cAAc,CAAC,UAAU,EAAE;IACzBC,QAAa,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IAChC,OAAO,IAAI,CAAC;GACb;;EAED,WAAW,CAAC,OAAO,EAAE;IACnB,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IACpB,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IACpB,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IACpB,OAAO,IAAI,CAAC;GACb;;EAED,MAAM,CAAC,OAAO,GAAG,IAAI,EAAE;IACrBC,MAAW,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC3B,OAAO,IAAI,CAAC;GACb;CACF;;AC/Gc,MAAM,MAAM,CAAC;EAC1B,WAAW,CAAC,EAAE,IAAI,GAAG,IAAI,EAAE,GAAG,GAAG,IAAI,EAAE,WAAW,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,EAAE;IAChF,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IAClB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;IAChB,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IAChC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;;IAEhB,IAAI,CAAC,SAAS,GAAG,IAAI,OAAO,EAAE,CAAC;IAC/B,IAAI,CAAC,iBAAiB,GAAG,IAAI,OAAO,EAAE,CAAC;IACvC,IAAI,CAAC,WAAW,GAAG,IAAI,OAAO,EAAE,CAAC;IACjC,IAAI,CAAC,eAAe,GAAG,IAAI,OAAO,EAAE,CAAC;;IAErC,IAAI,CAAC,iBAAiB,EAAE,CAAC;GAC1B;;EAED,IAAI,IAAI,CAAC,KAAK,EAAE;IACd,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACnB,IAAI,CAAC,iBAAiB,EAAE,CAAC;GAC1B;;EAED,IAAI,IAAI,GAAG;IACT,OAAO,IAAI,CAAC,KAAK,CAAC;GACnB;;EAED,IAAI,GAAG,CAAC,KAAK,EAAE;IACb,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;IAClB,IAAI,CAAC,iBAAiB,EAAE,CAAC;GAC1B;;EAED,IAAI,GAAG,GAAG;IACR,OAAO,IAAI,CAAC,IAAI,CAAC;GAClB;;EAED,IAAI,GAAG,CAAC,KAAK,EAAE;IACb,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;IAClB,IAAI,CAAC,iBAAiB,EAAE,CAAC;GAC1B;;EAED,IAAI,GAAG,GAAG;IACR,OAAO,IAAI,CAAC,IAAI,CAAC;GAClB;;EAED,IAAI,WAAW,CAAC,KAAK,EAAE;IACrB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;IAC1B,IAAI,CAAC,iBAAiB,EAAE,CAAC;GAC1B;;EAED,IAAI,WAAW,GAAG;IAChB,OAAO,IAAI,CAAC,YAAY,CAAC;GAC1B;;EAED,IAAI,gBAAgB,GAAG;IACrB,OAAO,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;GACtD;;EAED,IAAI,UAAU,GAAG;IACf,OAAO,IAAI,CAAC,WAAW,CAAC;GACzB;;EAED,IAAI,cAAc,GAAG;IACnB,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;GAClF;;EAED,iBAAiB,GAAG;IAClB,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;GACxC;CACF;;AAED,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;AACtE,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;AACrE,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;AACrE,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,EAAE,aAAa,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;AAC7E,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,EAAE,kBAAkB,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;AAClF,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,EAAE,YAAY,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;AAC5E,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,EAAE,gBAAgB,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;;AC5EhF;;AAEA,AAAe,MAAM,OAAO,CAAC;EAC3B,WAAW,CAAC;IACV,KAAK,GAAG,CAAC;IACT,MAAM,GAAG,CAAC;IACV,KAAK,GAAG,CAAC;IACT,aAAa,GAAG,CAAC;IACjB,cAAc,GAAG,CAAC;IAClB,aAAa,GAAG,CAAC;IACjB,SAAS,GAAG,IAAI;IAChB,OAAO,GAAG,IAAI;IACd,GAAG,GAAG,IAAI;IACV,OAAO,GAAG,IAAI;GACf,EAAE;IACD,MAAM,YAAY,GAAG,EAAE,CAAC;IACxB,MAAM,aAAa,GAAG,EAAE,CAAC;IACzB,MAAM,YAAY,GAAG,EAAE,CAAC;IACxB,MAAM,QAAQ,GAAG,EAAE,CAAC;;IAEpB,IAAI,gBAAgB,GAAG,CAAC,CAAC;;IAEzB,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,aAAa,EAAE,cAAc,CAAC,CAAC;IACzF,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,cAAc,CAAC,CAAC;IACzF,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC;IACpF,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC;IACxF,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,aAAa,EAAE,cAAc,CAAC,CAAC;IACvF,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,cAAc,CAAC,CAAC;;IAE3F,IAAI,SAAS,EAAE;MACb,IAAI,CAAC,SAAS,GAAG,IAAI,YAAY,CAAC,aAAa,CAAC,CAAC;KAClD;;IAED,IAAI,OAAO,EAAE;MACX,IAAI,CAAC,OAAO,GAAG,IAAI,YAAY,CAAC,YAAY,CAAC,CAAC;KAC/C;;IAED,IAAI,GAAG,EAAE;MACP,IAAI,CAAC,GAAG,GAAG,IAAI,YAAY,CAAC,QAAQ,CAAC,CAAC;KACvC;;IAED,IAAI,OAAO,EAAE;MACX,IAAI,CAAC,OAAO,GAAG,IAAI,WAAW,CAAC,YAAY,CAAC,CAAC;KAC9C;;IAED,SAAS,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE;MAC1F,MAAM,YAAY,GAAG,KAAK,GAAG,KAAK,CAAC;MACnC,MAAM,aAAa,GAAG,MAAM,GAAG,KAAK,CAAC;;MAErC,MAAM,SAAS,GAAG,KAAK,GAAG,CAAC,CAAC;MAC5B,MAAM,UAAU,GAAG,MAAM,GAAG,CAAC,CAAC;MAC9B,MAAM,SAAS,GAAG,KAAK,GAAG,CAAC,CAAC;;MAE5B,MAAM,MAAM,GAAG,KAAK,GAAG,CAAC,CAAC;MACzB,MAAM,MAAM,GAAG,KAAK,GAAG,CAAC,CAAC;;MAEzB,IAAI,aAAa,GAAG,CAAC,CAAC;;MAEtB,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;;MAEf,MAAM,MAAM,GAAG;QACb,CAAC,EAAE,CAAC;QACJ,CAAC,EAAE,CAAC;QACJ,CAAC,EAAE,CAAC;OACL,CAAC;;MAEF,KAAK,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,MAAM,EAAE,EAAE,EAAE,EAAE;QAC9B,MAAM,CAAC,GAAG,EAAE,GAAG,aAAa,GAAG,UAAU,CAAC;;QAE1C,KAAK,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,MAAM,EAAE,EAAE,EAAE,EAAE;UAC9B,MAAM,CAAC,GAAG,EAAE,GAAG,YAAY,GAAG,SAAS,CAAC;;UAExC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;UACrB,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;UACrB,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;;UAEtB,IAAI,SAAS,EAAE;YACb,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;WAClD;;UAED,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;UACd,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;UACd,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;;UAEhC,IAAI,OAAO,EAAE;YACX,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;WACjD;;UAED,IAAI,GAAG,EAAE;YACP,QAAQ,CAAC,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,CAAC;YAC1B,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC;WACjC;;UAED,aAAa,IAAI,CAAC,CAAC;SACpB;OACF;;MAED,IAAI,OAAO,EAAE;QACX,KAAK,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,KAAK,EAAE,EAAE,EAAE,EAAE;UAC7B,KAAK,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,KAAK,EAAE,EAAE,EAAE,EAAE;YAC7B,MAAM,CAAC,GAAG,gBAAgB,GAAG,EAAE,GAAG,MAAM,GAAG,EAAE,CAAC;YAC9C,MAAM,CAAC,GAAG,gBAAgB,GAAG,EAAE,GAAG,MAAM,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC,GAAG,gBAAgB,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,MAAM,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;YAC1D,MAAM,CAAC,GAAG,gBAAgB,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,MAAM,GAAG,EAAE,CAAC;;YAEpD,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3B,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;WAC5B;SACF;OACF;;MAED,gBAAgB,IAAI,aAAa,CAAC;KACnC;GACF;CACF;;AClHc,MAAM,QAAQ,CAAC;EAC5B,WAAW,CAAC;IACV,EAAE;IACF,IAAI,GAAG,IAAI;IACX,MAAM,GAAG,EAAE,CAAC,YAAY;IACxB,KAAK,GAAG,EAAE,CAAC,WAAW;GACvB,GAAG,EAAE,EAAE,EAAE,EAAE;IACV,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;IACb,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;;IAEnB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;;IAEtC,IAAI,IAAI,EAAE;MACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;KAClB;GACF;;EAED,IAAI,IAAI,CAAC,KAAK,EAAE;IACd,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;;IAEnB,IAAI,CAAC,IAAI,EAAE,CAAC;IACZ,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACxD,IAAI,CAAC,MAAM,EAAE,CAAC;GACf;;EAED,IAAI,IAAI,GAAG;IACT,OAAO,IAAI,CAAC,KAAK,CAAC;GACnB;;EAED,IAAI,CAAC;IACH,MAAM,GAAG,IAAI,CAAC,MAAM;IACpB,KAAK,GAAG,SAAS;IACjB,MAAM,GAAG,CAAC;IACV,IAAI,GAAG,SAAS;GACjB,GAAG,EAAE,EAAE;IACN,IAAI,KAAK,KAAK,SAAS,EAAE;MACvB,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;KAC1C,MAAM,IAAI,IAAI,KAAK,SAAS,EAAE;MAC7B,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;KACrD,MAAM;MACL,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;KACpE;GACF;;EAED,MAAM,CAAC;IACL,MAAM,GAAG,IAAI,CAAC,MAAM;IACpB,KAAK,GAAG,SAAS;IACjB,MAAM,GAAG,CAAC;IACV,IAAI,GAAG,SAAS;GACjB,GAAG,EAAE,EAAE;IACN,IAAI,KAAK,KAAK,SAAS,EAAE;MACvB,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;KAClC,MAAM,IAAI,IAAI,KAAK,SAAS,EAAE;MAC7B,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;KAC7C,MAAM;MACL,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;KAC5D;GACF;CACF;;ACzDc,MAAM,iBAAiB,CAAC;EACrC,WAAW,CAAC;IACV,EAAE;IACF,IAAI,GAAG,SAAS;IAChB,MAAM,GAAG,IAAI,QAAQ,CAAC;MACpB,EAAE;KACH,CAAC;IACF,IAAI,GAAG,CAAC;IACR,IAAI,GAAG,SAAS;IAChB,MAAM,GAAG,CAAC;IACV,UAAU,GAAG,KAAK;IAClB,MAAM,GAAG,CAAC;IACV,KAAK,GAAG,SAAS;IACjB,OAAO,GAAG,CAAC;GACZ,GAAG,EAAE,EAAE,EAAE,EAAE;IACV,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;IACb,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACrB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACnB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;;IAEvB,IAAI,IAAI,EAAE;MACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;KAClB;GACF;;EAED,IAAI,KAAK,CAAC,KAAK,EAAE;IACf,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;GACrB;;EAED,IAAI,KAAK,GAAG;IACV,OAAO,IAAI,CAAC,MAAM,KAAK,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;GAC/E;;EAED,IAAI,IAAI,CAAC,KAAK,EAAE;IACd,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;GACpB;;EAED,IAAI,IAAI,GAAG;IACT,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IACtB,IAAI,CAAC,IAAI,EAAE;MACT,IAAI,IAAI,CAAC,IAAI,YAAY,YAAY,IAAI,IAAI,CAAC,IAAI,YAAY,YAAY,EAAE;QAC1E,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;OACtB,MAAM,IAAI,IAAI,CAAC,IAAI,YAAY,UAAU,EAAE;QAC1C,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC;OAC9B,MAAM,IAAI,IAAI,CAAC,IAAI,YAAY,WAAW,EAAE;QAC3C,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC;OAC/B,MAAM,IAAI,IAAI,CAAC,IAAI,YAAY,WAAW,EAAE;QAC3C,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC;OAC7B;KACF;IACD,OAAO,IAAI,CAAC;GACb;;EAED,IAAI,IAAI,CAAC,KAAK,EAAE;IACd,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC;GAC1B;;EAED,IAAI,IAAI,GAAG;IACT,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;GACzB;CACF;;AChEc,MAAM,MAAM,CAAC;EAC1B,WAAW,CAAC;IACV,EAAE;IACF,SAAS,GAAG,SAAS;IACrB,OAAO,GAAG,SAAS;IACnB,GAAG,GAAG,SAAS;IACf,UAAU,GAAG,SAAS;IACtB,OAAO,GAAG,SAAS;GACpB,GAAG,EAAE,EAAE,EAAE,EAAE;IACV,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;;IAEb,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,wBAAwB,CAAC,CAAC;;IAE/C,IAAI,CAAC,sBAAsB,GAAG,MAAM,GAAG,CAAC;IACxC,IAAI,CAAC,oBAAoB,GAAG,MAAM,GAAG,CAAC;IACtC,MAAM,wBAAwB,GAAG,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,wBAAwB,CAAC,CAAC;IAChF,IAAI,wBAAwB,EAAE;MAC5B,IAAI,CAAC,sBAAsB,GAAG,wBAAwB,CAAC,0BAA0B,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;MACjH,IAAI,CAAC,oBAAoB,GAAG,wBAAwB,CAAC,wBAAwB,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;KAC9G,MAAM,IAAI,IAAI,CAAC,EAAE,CAAC,qBAAqB,EAAE;MACxC,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,EAAE,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;MAC1E,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,EAAE,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KACvE;;IAED,IAAI,CAAC,UAAU,GAAG,IAAI,GAAG,CAAC,UAAU,CAAC,CAAC;;IAEtC,IAAI,SAAS,EAAE;MACb,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,iBAAiB,CAAC;QACpD,EAAE;QACF,IAAI,EAAE,SAAS;QACf,IAAI,EAAE,CAAC;OACR,CAAC,CAAC,CAAC;KACL;;IAED,IAAI,OAAO,EAAE;MACX,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,iBAAiB,CAAC;QAClD,EAAE;QACF,IAAI,EAAE,OAAO;QACb,IAAI,EAAE,CAAC;OACR,CAAC,CAAC,CAAC;KACL;;IAED,IAAI,GAAG,EAAE;MACP,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,iBAAiB,CAAC;QAC9C,EAAE;QACF,IAAI,EAAE,GAAG;QACT,IAAI,EAAE,CAAC;OACR,CAAC,CAAC,CAAC;KACL;;IAED,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE;MAC1C,IAAI,EAAE,KAAK,YAAY,iBAAiB,CAAC,EAAE;QACzC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,iBAAiB,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;OAC/E;KACF;;IAED,IAAI,OAAO,IAAI,EAAE,IAAI,CAAC,OAAO,YAAY,iBAAiB,CAAC,EAAE;MAC3D,IAAI,CAAC,OAAO,GAAG,IAAI,iBAAiB,CAAC,MAAM,CAAC,MAAM,CAAC;QACjD,EAAE,EAAE,IAAI,CAAC,EAAE;QACX,MAAM,EAAE,IAAI,QAAQ,CAAC;UACnB,EAAE,EAAE,IAAI,CAAC,EAAE;UACX,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,oBAAoB;SACrC,CAAC;OACH,EAAE,OAAO,CAAC,MAAM,KAAK,SAAS,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC;KACjE;GACF;;EAED,IAAI,CAAC;IACH,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,SAAS;IACxB,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO;IACzB,KAAK,GAAG,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK;IAC7E,MAAM,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC;IAC/C,IAAI,GAAG,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI;IAC1C,KAAK,GAAG,CAAC;IACT,aAAa,GAAG,SAAS;GAC1B,GAAG,EAAE,EAAE;IACN,IAAI,QAAQ,EAAE;MACZ,IAAI,aAAa,KAAK,SAAS,EAAE;QAC/B,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC;OACvE,MAAM;QACL,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;OACjD;KACF,MAAM;MACL,IAAI,aAAa,KAAK,SAAS,EAAE;QAC/B,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;OAC9D,MAAM;QACL,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;OACxC;KACF;GACF;CACF;;AC5FD;;;;;;;;;;;AAWA,AAAO,SAAS,MAAM,GAAG;EACvB,IAAI,GAAG,GAAG,IAAIC,UAAmB,CAAC,CAAC,CAAC,CAAC;;EAErC,IAAIA,UAAmB,IAAI,YAAY,EAAE;IACvC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;GACZ;;EAED,OAAO,GAAG,CAAC;CACZ;AACD,AA2BA;;;;;;;;AAQA,AAAO,SAASC,MAAI,CAAC,GAAG,EAAE,CAAC,EAAE;EAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,OAAO,GAAG,CAAC;CACZ;;;;;;;;;;AAUD,AAAO,SAASC,KAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;EAC7B,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,OAAO,GAAG,CAAC;CACZ;;;;;;;;;;AAUD,AAAO,SAAS,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;EAC7B,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACrB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACrB,OAAO,GAAG,CAAC;CACZ;;;;;;;;;;AAUD,AAAO,SAAS,QAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;EAClC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACrB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACrB,OAAO,GAAG,CAAC;CACZ;AACD,AA+FA;;;;;;;;;AASA,AAAO,SAASC,OAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;EAC/B,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAClB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAClB,OAAO,GAAG,CAAC;CACZ;AACD,AAeA;;;;;;;;AAQA,AAAO,SAAS,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE;EAC7B,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACf,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACpB,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;CACjC;AACD,AAaA;;;;;;;AAOA,AAAO,SAAS,MAAM,CAAC,CAAC,EAAE;EACxB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACR,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;CACjC;;;;;;;;AAQD,AAAO,SAAS,aAAa,CAAC,CAAC,EAAE;EAC/B,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACR,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;CACtB;;;;;;;;;AASD,AAAO,SAAS,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE;EAC7B,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,OAAO,GAAG,CAAC;CACZ;AACD,AAaA;;;;;;;;AAQA,AAAO,SAAS,SAAS,CAAC,GAAG,EAAE,CAAC,EAAE;EAChC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACR,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;;EAExB,IAAI,GAAG,GAAG,CAAC,EAAE;;IAEX,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;GAC1B;;EAED,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EACpB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EACpB,OAAO,GAAG,CAAC;CACZ;;;;;;;;;AASD,AAAO,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE;EACxB,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;CAClC;;;;;;;;;;;AAWD,AAAO,SAAS,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;EAC/B,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAClC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACpB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,OAAO,GAAG,CAAC;CACZ;;;;;;;;;;;AAWD,AAAO,SAAS,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;EACjC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;MACT,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;EAC9B,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;EAC9B,OAAO,GAAG,CAAC;CACZ;AACD,AA+CA;;;;;;;;;;AAUA,AAAO,SAAS,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;EACvC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACR,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACpC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACpC,OAAO,GAAG,CAAC;CACZ;;;;;;;;;;;;AAYD,AAAO,SAAS,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;EACvC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACrC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACrC,OAAO,GAAG,CAAC;CACZ;AACD,AA8EA;;;;;;;;AAQA,AAAO,SAAS,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE;EAChC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;CACvC;AACD,AAyDA;;;;;;;;;;;;;AAaA,AAAO,IAAI,OAAO,GAAG,YAAY;EAC/B,IAAI,GAAG,GAAG,MAAM,EAAE,CAAC;EACnB,OAAO,UAAU,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE;IAClD,IAAI,CAAC,EAAE,CAAC,CAAC;;IAET,IAAI,CAAC,MAAM,EAAE;MACX,MAAM,GAAG,CAAC,CAAC;KACZ;;IAED,IAAI,CAAC,MAAM,EAAE;MACX,MAAM,GAAG,CAAC,CAAC;KACZ;;IAED,IAAI,KAAK,EAAE;MACT,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,MAAM,GAAG,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;KACjD,MAAM;MACL,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;KACd;;IAED,KAAK,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,MAAM,EAAE;MACnC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;MAClB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;MAClB,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;MACd,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;KACnB;;IAED,OAAO,CAAC,CAAC;GACV,CAAC;CACH,EAAE;;IAAC,JC9nBW,MAAM,OAAO,SAAS,YAAY,CAAC;EAChD,OAAO,QAAQ,CAAC,QAAQ,EAAE,QAAQ,EAAE;IAClC,OAAOC,QAAa,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;GAC1C;;EAED,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;IAC1B,KAAK,CAAC,KAAK,CAAC,CAAC;IACb,OAAO,IAAI,CAAC;GACb;;EAED,IAAI,CAAC,GAAG;IACN,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;GAChB;;EAED,IAAI,CAAC,CAAC,KAAK,EAAE;IACX,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;GACjB;;EAED,IAAI,CAAC,GAAG;IACN,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;GAChB;;EAED,IAAI,CAAC,CAAC,KAAK,EAAE;IACX,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;GACjB;;EAED,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE;IACRC,KAAQ,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACrB,OAAO,IAAI,CAAC;GACb;;EAED,IAAI,CAAC,OAAO,EAAE;IACZC,MAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACzB,OAAO,IAAI,CAAC;GACb;;EAED,GAAG,CAAC,OAAO,EAAE;IACXC,GAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IAC9B,OAAO,IAAI,CAAC;GACb;;EAED,IAAI,IAAI,GAAG;IACT,OAAOC,MAAW,CAAC,IAAI,CAAC,CAAC;GAC1B;;EAED,IAAI,WAAW,GAAG;IAChB,OAAOC,aAAkB,CAAC,IAAI,CAAC,CAAC;GACjC;;EAED,QAAQ,CAAC,OAAO,EAAE;IAChBC,QAAa,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IACnC,OAAO,IAAI,CAAC;GACb;;EAED,MAAM,CAAC,OAAO,GAAG,IAAI,EAAE;IACrBC,MAAW,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC3B,OAAO,IAAI,CAAC;GACb;;EAED,KAAK,CAAC,QAAQ,EAAE,QAAQ,EAAE;IACxBC,KAAU,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACrC,OAAO,IAAI,CAAC;GACb;;EAED,KAAK,CAAC,KAAK,EAAE;IACXC,OAAU,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IAC9B,OAAO,IAAI,CAAC;GACb;;EAED,SAAS,GAAG;IACVC,SAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;GAC5B;;EAED,GAAG,CAAC,OAAO,EAAE;IACX,OAAOC,GAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;GAChC;;EAED,QAAQ,CAAC,OAAO,EAAE;IAChB,OAAO,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;GACxC;;EAED,MAAM,CAAC,OAAO,EAAE;IACd,OAAOC,WAAgB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;GACxC;;EAED,YAAY,CAAC,OAAO,EAAE;IACpBC,aAAkB,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IACxC,OAAO,IAAI,CAAC;GACb;;EAED,YAAY,CAAC,OAAO,EAAE;IACpBC,aAAkB,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IACxC,OAAO,IAAI,CAAC;GACb;;EAED,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE;IACnBC,IAAS,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;GACvC;;EAED,KAAK,GAAG;IACN,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC;GAC1B;CACF;;ACvGD;;;;;;;;;;;AAWA,AAAO,SAASC,QAAM,GAAG;EACvB,IAAI,GAAG,GAAG,IAAIpB,UAAmB,CAAC,CAAC,CAAC,CAAC;;EAErC,IAAIA,UAAmB,IAAI,YAAY,EAAE;IACvC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;GACZ;;EAED,OAAO,GAAG,CAAC;CACZ;AACD,AAcA;;;;;;;AAOA,AAAO,SAASqB,QAAM,CAAC,CAAC,EAAE;EACxB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;CACzC;;;;;;;;;;AAUD,AAAO,SAAS,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;EAClC,IAAI,GAAG,GAAG,IAAIrB,UAAmB,CAAC,CAAC,CAAC,CAAC;EACrC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,OAAO,GAAG,CAAC;CACZ;;;;;;;;;AASD,AAAO,SAASC,MAAI,CAAC,GAAG,EAAE,CAAC,EAAE;EAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,OAAO,GAAG,CAAC;CACZ;;;;;;;;;;;AAWD,AAAO,SAASC,KAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;EAChC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,OAAO,GAAG,CAAC;CACZ;;;;;;;;;;AAUD,AAAO,SAASoB,KAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;EAC7B,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACrB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACrB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACrB,OAAO,GAAG,CAAC;CACZ;;;;;;;;;;AAUD,AAAO,SAASC,UAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;EAClC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACrB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACrB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACrB,OAAO,GAAG,CAAC;CACZ;AACD,AAsGA;;;;;;;;;AASA,AAAO,SAASpB,OAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;EAC/B,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAClB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAClB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAClB,OAAO,GAAG,CAAC;CACZ;AACD,AAgBA;;;;;;;;AAQA,AAAO,SAASqB,UAAQ,CAAC,CAAC,EAAE,CAAC,EAAE;EAC7B,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACpB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACpB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACpB,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;CACzC;;;;;;;;;AASD,AAAO,SAAS,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE;EACpC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACpB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACpB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACpB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;CAC9B;;;;;;;;AAQD,AAAO,SAASC,eAAa,CAAC,CAAC,EAAE;EAC/B,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;CAC9B;;;;;;;;;AASD,AAAO,SAASC,QAAM,CAAC,GAAG,EAAE,CAAC,EAAE;EAC7B,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,OAAO,GAAG,CAAC;CACZ;AACD,AAcA;;;;;;;;AAQA,AAAO,SAASC,WAAS,CAAC,GAAG,EAAE,CAAC,EAAE;EAChC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;;EAEhC,IAAI,GAAG,GAAG,CAAC,EAAE;;IAEX,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;GAC1B;;EAED,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EACpB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EACpB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EACpB,OAAO,GAAG,CAAC;CACZ;;;;;;;;;AASD,AAAO,SAASC,KAAG,CAAC,CAAC,EAAE,CAAC,EAAE;EACxB,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;CAChD;;;;;;;;;;AAUD,AAAO,SAASC,OAAK,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;EAC/B,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;MACT,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;MACT,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;MACT,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;MACT,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3B,OAAO,GAAG,CAAC;CACZ;AACD,AAqFA;;;;;;;;;;AAUA,AAAO,SAASC,eAAa,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;EACvC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACR,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACR,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EAChD,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC;EACb,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;EACtD,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;EACtD,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;EACvD,OAAO,GAAG,CAAC;CACZ;AACD,AA2IA;;;;;;;AAOA,AAAO,SAAS,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE;EAC1B,IAAI,KAAK,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACzC,IAAI,KAAK,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACzCH,WAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;EACxBA,WAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;EACxB,IAAI,MAAM,GAAGC,KAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;;EAE/B,IAAI,MAAM,GAAG,GAAG,EAAE;IAChB,OAAO,CAAC,CAAC;GACV,MAAM,IAAI,MAAM,GAAG,CAAC,GAAG,EAAE;IACxB,OAAO,IAAI,CAAC,EAAE,CAAC;GAChB,MAAM;IACL,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;GAC1B;CACF;AACD,AAuBA;;;;;;;;AAQA,AAAO,SAASG,aAAW,CAAC,CAAC,EAAE,CAAC,EAAE;EAChC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;CACxD;AACD,AA+CA;;;;;AAKA,AAAO,IAAI,GAAG,GAAGV,QAAM,CAAC;AACxB,AAMA;;;;;;;;;;;;;AAaA,AAAO,IAAIW,SAAO,GAAG,YAAY;EAC/B,IAAI,GAAG,GAAGZ,QAAM,EAAE,CAAC;EACnB,OAAO,UAAU,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE;IAClD,IAAI,CAAC,EAAE,CAAC,CAAC;;IAET,IAAI,CAAC,MAAM,EAAE;MACX,MAAM,GAAG,CAAC,CAAC;KACZ;;IAED,IAAI,CAAC,MAAM,EAAE;MACX,MAAM,GAAG,CAAC,CAAC;KACZ;;IAED,IAAI,KAAK,EAAE;MACT,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,MAAM,GAAG,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;KACjD,MAAM;MACL,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;KACd;;IAED,KAAK,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,MAAM,EAAE;MACnC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;MAClB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;MAClB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;MAClB,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;MACd,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;MAClB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;KACnB;;IAED,OAAO,CAAC,CAAC;GACV,CAAC;CACH,EAAE;;IAAC,JClxBW,MAAM,OAAO,SAAS,YAAY,CAAC;EAChD,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;IAC7B,KAAK,CAAC,KAAK,CAAC,CAAC;IACb,OAAO,IAAI,CAAC;GACb;;EAED,IAAI,CAAC,GAAG;IACN,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;GAChB;;EAED,IAAI,CAAC,CAAC,KAAK,EAAE;IACX,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;GACjB;;EAED,IAAI,CAAC,GAAG;IACN,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;GAChB;;EAED,IAAI,CAAC,CAAC,KAAK,EAAE;IACX,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;GACjB;;EAED,IAAI,CAAC,GAAG;IACN,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;GAChB;;EAED,IAAI,CAAC,CAAC,KAAK,EAAE;IACX,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;GACjB;;EAED,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;IACXa,KAAQ,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACxB,OAAO,IAAI,CAAC;GACb;;EAED,IAAI,CAAC,OAAO,EAAE;IACZC,MAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACzB,OAAO,IAAI,CAAC;GACb;;EAED,GAAG,CAAC,OAAO,EAAE;IACXC,KAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IAC9B,OAAO,IAAI,CAAC;GACb;;EAED,IAAI,IAAI,GAAG;IACT,OAAOC,QAAW,CAAC,IAAI,CAAC,CAAC;GAC1B;;EAED,IAAI,WAAW,GAAG;IAChB,OAAOC,eAAkB,CAAC,IAAI,CAAC,CAAC;GACjC;;EAED,QAAQ,CAAC,OAAO,EAAE;IAChB,OAAOC,UAAa,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;GACrC;;EAED,eAAe,CAAC,OAAO,EAAE;IACvB,OAAOC,eAAoB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;GAC5C;;EAED,QAAQ,CAAC,OAAO,EAAE;IAChBC,UAAa,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IACnC,OAAO,IAAI,CAAC;GACb;;EAED,MAAM,CAAC,OAAO,GAAG,IAAI,EAAE;IACrBC,QAAW,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC3B,OAAO,IAAI,CAAC;GACb;;EAED,KAAK,CAAC,QAAQ,EAAE,QAAQ,EAAE;IACxBC,OAAU,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACrC,OAAO,IAAI,CAAC;GACb;;EAED,KAAK,CAAC,KAAK,EAAE;IACXC,OAAU,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IAC9B,OAAO,IAAI,CAAC;GACb;;EAED,SAAS,GAAG;IACVC,WAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC3B,OAAO,IAAI,CAAC;GACb;;EAED,GAAG,CAAC,OAAO,EAAE;IACX,OAAOC,KAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;GAChC;;EAED,MAAM,CAAC,OAAO,EAAE;IACd,OAAOC,aAAgB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;GACxC;;EAED,YAAY,CAAC,OAAO,EAAE;IACpBC,eAAkB,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IACxC,OAAO,IAAI,CAAC;GACb;;EAED,KAAK,CAAC,OAAO,EAAE;IACb,OAAOC,KAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;GAClC;;EAED,KAAK,GAAG;IACN,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC;GAC1B;CACF;;AC3GD;;;;;;;;;;;AAWA,AAAO,SAAS5B,QAAM,GAAG;EACvB,IAAI,GAAG,GAAG,IAAIpB,UAAmB,CAAC,CAAC,CAAC,CAAC;;EAErC,IAAIA,UAAmB,IAAI,YAAY,EAAE;IACvC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;GACZ;;EAED,OAAO,GAAG,CAAC;CACZ;AACD,AAiCA;;;;;;;;AAQA,AAAO,SAASC,MAAI,CAAC,GAAG,EAAE,CAAC,EAAE;EAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,OAAO,GAAG,CAAC;CACZ;;;;;;;;;;;;AAYD,AAAO,SAASC,KAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;EACnC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,OAAO,GAAG,CAAC;CACZ;AACD,AAsQA;;;;;;;;AAQA,AAAO,SAASyB,WAAS,CAAC,GAAG,EAAE,CAAC,EAAE;EAChC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;;EAExC,IAAI,GAAG,GAAG,CAAC,EAAE;IACX,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;GAC1B;;EAED,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;EACjB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;EACjB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;EACjB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;EACjB,OAAO,GAAG,CAAC;CACZ;AACD,AAgPA;;;;;;;;;;;;;AAaA,AAAO,IAAIK,SAAO,GAAG,YAAY;EAC/B,IAAI,GAAG,GAAGZ,QAAM,EAAE,CAAC;EACnB,OAAO,UAAU,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE;IAClD,IAAI,CAAC,EAAE,CAAC,CAAC;;IAET,IAAI,CAAC,MAAM,EAAE;MACX,MAAM,GAAG,CAAC,CAAC;KACZ;;IAED,IAAI,CAAC,MAAM,EAAE;MACX,MAAM,GAAG,CAAC,CAAC;KACZ;;IAED,IAAI,KAAK,EAAE;MACT,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,MAAM,GAAG,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;KACjD,MAAM;MACL,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;KACd;;IAED,KAAK,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,MAAM,EAAE;MACnC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;MAClB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;MAClB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;MAClB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;MAClB,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;MACd,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;MAClB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;MAClB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;KACnB;;IAED,OAAO,CAAC,CAAC;GACV,CAAC;CACH,EAAE;;IAAC,JCrpBW,MAAM,OAAO,SAAS,YAAY,CAAC;EAChD,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;IAChC,KAAK,CAAC,KAAK,CAAC,CAAC;IACb,OAAO,IAAI,CAAC;GACb;;EAED,IAAI,CAAC,GAAG;IACN,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;GAChB;;EAED,IAAI,CAAC,CAAC,KAAK,EAAE;IACX,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;GACjB;;EAED,IAAI,CAAC,GAAG;IACN,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;GAChB;;EAED,IAAI,CAAC,CAAC,KAAK,EAAE;IACX,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;GACjB;;EAED,IAAI,CAAC,GAAG;IACN,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;GAChB;;EAED,IAAI,CAAC,CAAC,KAAK,EAAE;IACX,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;GACjB;;EAED,IAAI,CAAC,GAAG;IACN,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;GAChB;;EAED,IAAI,CAAC,CAAC,KAAK,EAAE;IACX,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;GACjB;;EAED,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;IACd6B,KAAQ,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3B,OAAO,IAAI,CAAC;GACb;CACF;;AC3CD;;;;;;;;;;;AAWA,AAAO,SAAS7B,QAAM,GAAG;EACvB,IAAI,GAAG,GAAG,IAAIpB,UAAmB,CAAC,CAAC,CAAC,CAAC;;EAErC,IAAIA,UAAmB,IAAI,YAAY,EAAE;IACvC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;GACZ;;EAED,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,OAAO,GAAG,CAAC;CACZ;;;;;;;;;AASD,AAAO,SAAS,QAAQ,CAAC,GAAG,EAAE,CAAC,EAAE;EAC/B,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACf,OAAO,GAAG,CAAC;CACZ;AACD,AAoBA;;;;;;;;AAQA,AAAO,SAASC,MAAI,CAAC,GAAG,EAAE,CAAC,EAAE;EAC3B,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,OAAO,GAAG,CAAC;CACZ;AACD,AA4BA;;;;;;;;;;;;;;;;AAgBA,AAAO,SAASC,KAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;EACpE,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EACb,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EACb,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EACb,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EACb,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EACb,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EACb,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EACb,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EACb,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EACb,OAAO,GAAG,CAAC;CACZ;;;;;;;;AAQD,AAAO,SAASgD,UAAQ,CAAC,GAAG,EAAE;EAC5B,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACX,OAAO,GAAG,CAAC;CACZ;AACD,AAkCA;;;;;;;;AAQA,AAAO,SAASC,QAAM,CAAC,GAAG,EAAE,CAAC,EAAE;EAC7B,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;MACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;MACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;MACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;MACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;MACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;MACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAChC,IAAI,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EACjC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;;EAEhC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;;EAE5C,IAAI,CAAC,GAAG,EAAE;IACR,OAAO,IAAI,CAAC;GACb;;EAED,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAChB,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;EACnB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;EACxC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;EACvC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;EACnB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;EACvC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;EACxC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;EACnB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;EACxC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;EACvC,OAAO,GAAG,CAAC;CACZ;AACD,AAgDA;;;;;;;;;AASA,AAAO,SAASC,UAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE;EAClC,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;MACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;MACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;MACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;MACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;MACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;MACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;MACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;MACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;MACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;MACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;MACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;MACV,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAC3C,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAC3C,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAC3C,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAC3C,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAC3C,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAC3C,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAC3C,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAC3C,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAA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"}